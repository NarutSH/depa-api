
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  fullnameTh: 'fullnameTh',
  fullnameEn: 'fullnameEn',
  about: 'about',
  phoneNumber: 'phoneNumber',
  email: 'email',
  website: 'website',
  address: 'address',
  image: 'image',
  industries: 'industries',
  tags: 'tags',
  channels: 'channels',
  specialists: 'specialists',
  tags_json: 'tags_json',
  channels_json: 'channels_json',
  specialists_json: 'specialists_json',
  userType: 'userType',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserTagsScalarFieldEnum = {
  userId: 'userId',
  tagSlug: 'tagSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserChannelsScalarFieldEnum = {
  userId: 'userId',
  channelSlug: 'channelSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserSkillsScalarFieldEnum = {
  userId: 'userId',
  skillSlug: 'skillSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserIndustryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  industryId: 'industryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  userId: 'userId',
  expiresAt: 'expiresAt',
  issuedAt: 'issuedAt',
  revokedAt: 'revokedAt'
};

exports.Prisma.CompanyRevenueScalarFieldEnum = {
  id: 'id',
  year: 'year',
  total: 'total',
  companyId: 'companyId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FreelanceRevenueScalarFieldEnum = {
  id: 'id',
  year: 'year',
  total: 'total',
  freelanceId: 'freelanceId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RevenueStreamScalarFieldEnum = {
  id: 'id',
  year: 'year',
  industryTypeSlug: 'industryTypeSlug',
  categorySlug: 'categorySlug',
  sourceSlug: 'sourceSlug',
  channelSlug: 'channelSlug',
  segmentSlug: 'segmentSlug',
  percent: 'percent',
  ctrPercent: 'ctrPercent',
  value: 'value',
  companyId: 'companyId',
  companyJuristicId: 'companyJuristicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  juristicId: 'juristicId',
  nameTh: 'nameTh',
  nameEn: 'nameEn',
  description: 'description',
  description_en: 'description_en',
  image: 'image',
  cover_image: 'cover_image',
  address: 'address',
  subDistrict: 'subDistrict',
  district: 'district',
  province: 'province',
  postalCode: 'postalCode',
  registerdCapital: 'registerdCapital',
  employeeCount: 'employeeCount',
  phoneNumber: 'phoneNumber',
  email: 'email',
  website: 'website',
  logo: 'logo',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  industries: 'industries'
};

exports.Prisma.CompanyIndustryScalarFieldEnum = {
  companyId: 'companyId',
  industrySlug: 'industrySlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FreelanceScalarFieldEnum = {
  id: 'id',
  firstNameTh: 'firstNameTh',
  lastNameTh: 'lastNameTh',
  firstNameEn: 'firstNameEn',
  lastNameEn: 'lastNameEn',
  image: 'image',
  cover_image: 'cover_image',
  address: 'address',
  subDistrict: 'subDistrict',
  district: 'district',
  province: 'province',
  postalCode: 'postalCode',
  phoneNumber: 'phoneNumber',
  email: 'email',
  juristicId: 'juristicId',
  industryTypes: 'industryTypes',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.FreelanceIndustryScalarFieldEnum = {
  freelanceId: 'freelanceId',
  industrySlug: 'industrySlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.IndustryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  industrySlug: 'industrySlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LookingForScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  industrySlug: 'industrySlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  industrySlug: 'industrySlug'
};

exports.Prisma.SourceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  industrySlug: 'industrySlug'
};

exports.Prisma.ChannelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  industrySlug: 'industrySlug'
};

exports.Prisma.SegmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  slug: 'slug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  industrySlug: 'industrySlug'
};

exports.Prisma.PortfolioScalarFieldEnum = {
  id: 'id',
  title: 'title',
  title_en: 'title_en',
  description: 'description',
  description_en: 'description_en',
  cover_image: 'cover_image',
  link: 'link',
  industryTypeSlug: 'industryTypeSlug',
  tags: 'tags',
  looking_for: 'looking_for',
  freelanceId: 'freelanceId',
  companyId: 'companyId',
  companyJuristicId: 'companyJuristicId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PortfolioTagScalarFieldEnum = {
  portfolioId: 'portfolioId',
  tagSlug: 'tagSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PortfolioLookingForScalarFieldEnum = {
  portfolioId: 'portfolioId',
  lookingForSlug: 'lookingForSlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PortfolioStandardsScalarFieldEnum = {
  id: 'id',
  portfolioId: 'portfolioId',
  standardsId: 'standardsId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PortfolioImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  description: 'description',
  type: 'type',
  portfolioId: 'portfolioId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  portfolioId: 'portfolioId',
  userId: 'userId',
  action: 'action',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.StandardsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  industrySlug: 'industrySlug',
  image: 'image',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SkillScalarFieldEnum = {
  id: 'id',
  title: 'title',
  slug: 'slug',
  group: 'group',
  industrySlug: 'industrySlug',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  freelanceId: 'freelanceId'
};

exports.Prisma.PortfolioCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  portfolioId: 'portfolioId',
  userId: 'userId',
  parentId: 'parentId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserType = exports.$Enums.UserType = {
  company: 'company',
  freelance: 'freelance',
  guest: 'guest',
  admin: 'admin'
};

exports.PortfolioImageType = exports.$Enums.PortfolioImageType = {
  cover: 'cover',
  gallery: 'gallery',
  main: 'main'
};

exports.FavoriteAction = exports.$Enums.FavoriteAction = {
  favorite: 'favorite',
  unfavorite: 'unfavorite'
};

exports.StandardsType = exports.$Enums.StandardsType = {
  ERSB: 'ERSB',
  PEGI: 'PEGI',
  CERO: 'CERO',
  USK: 'USK',
  ACB: 'ACB',
  IARC: 'IARC',
  GRAC: 'GRAC',
  VSC: 'VSC',
  OFLC: 'OFLC',
  BBFC: 'BBFC',
  FPB: 'FPB',
  RARS: 'RARS',
  GSRB: 'GSRB',
  GSRR: 'GSRR',
  MPA: 'MPA',
  EIRIN: 'EIRIN',
  NBTC: 'NBTC',
  ESRB: 'ESRB'
};

exports.Prisma.ModelName = {
  User: 'User',
  UserTags: 'UserTags',
  UserChannels: 'UserChannels',
  UserSkills: 'UserSkills',
  UserIndustry: 'UserIndustry',
  RefreshToken: 'RefreshToken',
  CompanyRevenue: 'CompanyRevenue',
  FreelanceRevenue: 'FreelanceRevenue',
  RevenueStream: 'RevenueStream',
  Company: 'Company',
  CompanyIndustry: 'CompanyIndustry',
  Freelance: 'Freelance',
  FreelanceIndustry: 'FreelanceIndustry',
  Industry: 'Industry',
  Tag: 'Tag',
  LookingFor: 'LookingFor',
  Category: 'Category',
  Source: 'Source',
  Channel: 'Channel',
  Segment: 'Segment',
  Portfolio: 'Portfolio',
  PortfolioTag: 'PortfolioTag',
  PortfolioLookingFor: 'PortfolioLookingFor',
  PortfolioStandards: 'PortfolioStandards',
  PortfolioImage: 'PortfolioImage',
  Favorite: 'Favorite',
  Standards: 'Standards',
  Skill: 'Skill',
  PortfolioComment: 'PortfolioComment'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
