{
  "openapi": "3.0.0",
  "paths": {
    "/ping": {
      "get": {
        "operationId": "pingServer",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Server is running - returns HTML status page",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "summary": "Ping server to check if API is running",
        "tags": [
          "Ping"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Retrieves all users with pagination and filtering. Admin only.",
        "operationId": "getAllUsers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for email, fullnameTh, fullnameEn",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., email:asc, createdAt:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria in JSON format or as query parameters",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all users retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleUsersResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires admin role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Creates a new user profile for authenticated users.",
        "operationId": "createUser",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User profile created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - requires authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - can only create profile with own email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create user profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/me": {
      "get": {
        "description": "Retrieves the profile of the currently authenticated user.",
        "operationId": "getCurrentUser",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Current user profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUserResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - requires authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - User ID not found in request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{id}": {
      "get": {
        "description": "Retrieves user by ID. Users can only access their own profile.",
        "operationId": "getUserById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUserResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - cannot access other users' profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updates a user by ID. Users can only update their own profile.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "User ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - cannot update other users's profiles",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/email/{email}": {
      "get": {
        "description": "Retrieves user by email for any authenticated user.",
        "operationId": "getUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "description": "User email address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUserResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized - requires authentication",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user by email",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "description": "Updates a user by email. Admin only.",
        "operationId": "updateUserByEmail",
        "parameters": [
          {
            "name": "email",
            "required": true,
            "in": "path",
            "description": "User email address",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateUserResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden - requires admin role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update user by email",
        "tags": [
          "Users"
        ]
      }
    },
    "/company": {
      "get": {
        "operationId": "getCompanies",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for company name or description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Field to sort by, with optional direction (e.g., \"name:asc\", \"createdAt:desc\")",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria in JSON format or as query parameters",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a paginated list of companies with their details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all companies with filtering and pagination",
        "tags": [
          "Company"
        ]
      },
      "post": {
        "operationId": "createCompany",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Company data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The company has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new company",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/all": {
      "get": {
        "operationId": "getAllCompanies",
        "parameters": [
          {
            "name": "industry",
            "required": false,
            "in": "query",
            "description": "Filter companies by industry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all companies matching the optional industry filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CompanyWithUserResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all companies with optional industry filter",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/user/{userId}": {
      "get": {
        "operationId": "getCompanyByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "The user ID of the company",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the company with the specified user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get company by user ID",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/{id}": {
      "patch": {
        "operationId": "updateCompany",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the company to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Company data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The company has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update company details",
        "tags": [
          "Company"
        ]
      },
      "get": {
        "operationId": "getCompanyById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the company",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the company with the specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWithUserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get company by ID",
        "tags": [
          "Company"
        ]
      }
    },
    "/company/juristic/{juristicId}": {
      "patch": {
        "operationId": "updateCompanyByJuristic",
        "parameters": [
          {
            "name": "juristicId",
            "required": true,
            "in": "path",
            "description": "The juristic ID of the company to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Company data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCompanyDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The company has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update company by juristic ID",
        "tags": [
          "Company"
        ]
      },
      "get": {
        "operationId": "getCompanyByJuristicId",
        "parameters": [
          {
            "name": "juristicId",
            "required": true,
            "in": "path",
            "description": "The juristic ID of the company",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the company with the specified juristic ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CompanyWithRevenueResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Company not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get company by juristic ID",
        "tags": [
          "Company"
        ]
      }
    },
    "/revenue-stream": {
      "get": {
        "operationId": "getAllRevenueStreams",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for revenue stream fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., year:asc, value:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria (e.g., year, industryTypeSlug)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a paginated list of revenue stream records",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                        "year": 2025,
                        "industryTypeSlug": "game",
                        "categorySlug": "mobile-game",
                        "sourceSlug": "direct-sale",
                        "channelSlug": "app-store",
                        "segmentSlug": "casual",
                        "percent": 25.5,
                        "ctrPercent": 15.75,
                        "value": 1250000,
                        "companyJuristicId": "1234567890123",
                        "createdAt": "2025-05-11T08:21:18.000Z",
                        "updatedAt": "2025-05-11T08:21:18.000Z",
                        "industry": {
                          "name": "Game",
                          "slug": "game"
                        },
                        "category": {
                          "name": "Mobile Game",
                          "slug": "mobile-game"
                        },
                        "source": {
                          "name": "Direct Sale",
                          "slug": "direct-sale"
                        },
                        "channel": {
                          "name": "App Store",
                          "slug": "app-store"
                        },
                        "segment": {
                          "name": "Casual",
                          "slug": "casual"
                        },
                        "company": {
                          "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                          "juristicId": "1234567890123",
                          "nameTh": "บริษัท ทดสอบ จำกัด",
                          "nameEn": "Test Company Ltd."
                        }
                      }
                    ],
                    "meta": {
                      "total": 25,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 3
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all revenue stream data with filtering and pagination",
        "tags": [
          "Revenue Stream"
        ]
      },
      "post": {
        "operationId": "createRevenueStream",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRevenueStreamDto"
              },
              "examples": {
                "example1": {
                  "summary": "Basic revenue stream creation",
                  "description": "Example payload for creating a new revenue stream",
                  "value": {
                    "year": 2025,
                    "industryTypeSlug": "game",
                    "categorySlug": "mobile-game",
                    "sourceSlug": "direct-sale",
                    "channelSlug": "app-store",
                    "segmentSlug": "casual",
                    "percent": 25.5,
                    "ctrPercent": 15.75,
                    "value": 1250000,
                    "companyJuristicId": "1234567890123"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The revenue stream record has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "year": 2025,
                    "industryTypeSlug": "game",
                    "categorySlug": "mobile-game",
                    "sourceSlug": "direct-sale",
                    "channelSlug": "app-store",
                    "segmentSlug": "casual",
                    "percent": 25.5,
                    "ctrPercent": 15.75,
                    "value": 1250000,
                    "companyJuristicId": "1234567890123",
                    "createdAt": "2025-05-11T08:21:18.000Z",
                    "updatedAt": "2025-05-11T08:21:18.000Z",
                    "industry": {
                      "name": "Game",
                      "slug": "game"
                    },
                    "category": {
                      "name": "Mobile Game",
                      "slug": "mobile-game"
                    },
                    "source": {
                      "name": "Direct Sale",
                      "slug": "direct-sale"
                    },
                    "channel": {
                      "name": "App Store",
                      "slug": "app-store"
                    },
                    "segment": {
                      "name": "Casual",
                      "slug": "casual"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new revenue stream record",
        "tags": [
          "Revenue Stream"
        ]
      }
    },
    "/revenue-stream/company/{companyJuristicId}": {
      "get": {
        "operationId": "getRevenueStreamsByCompany",
        "parameters": [
          {
            "name": "companyJuristicId",
            "required": true,
            "in": "path",
            "description": "The juristic ID of the company",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for revenue stream fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., year:asc, value:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria (e.g., year, industryTypeSlug)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return revenue stream data for the specified company",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "data": [
                      {
                        "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                        "year": 2025,
                        "industryTypeSlug": "game",
                        "categorySlug": "mobile-game",
                        "sourceSlug": "direct-sale",
                        "channelSlug": "app-store",
                        "segmentSlug": "casual",
                        "percent": 25.5,
                        "ctrPercent": 15.75,
                        "value": 1250000,
                        "companyJuristicId": "1234567890123",
                        "createdAt": "2025-05-11T08:21:18.000Z",
                        "updatedAt": "2025-05-11T08:21:18.000Z",
                        "industry": {
                          "name": "Game",
                          "slug": "game"
                        },
                        "category": {
                          "name": "Mobile Game",
                          "slug": "mobile-game"
                        },
                        "source": {
                          "name": "Direct Sale",
                          "slug": "direct-sale"
                        },
                        "channel": {
                          "name": "App Store",
                          "slug": "app-store"
                        },
                        "segment": {
                          "name": "Casual",
                          "slug": "casual"
                        }
                      }
                    ],
                    "meta": {
                      "total": 5,
                      "page": 1,
                      "limit": 10,
                      "totalPages": 1
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get revenue stream data for a specific company",
        "tags": [
          "Revenue Stream"
        ]
      }
    },
    "/revenue-stream/{id}": {
      "get": {
        "operationId": "getRevenueStreamById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the revenue stream record",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the specified revenue stream record",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "year": 2025,
                    "industryTypeSlug": "game",
                    "categorySlug": "mobile-game",
                    "sourceSlug": "direct-sale",
                    "channelSlug": "app-store",
                    "segmentSlug": "casual",
                    "percent": 25.5,
                    "ctrPercent": 15.75,
                    "value": 1250000,
                    "companyJuristicId": "1234567890123",
                    "createdAt": "2025-05-11T08:21:18.000Z",
                    "updatedAt": "2025-05-11T08:21:18.000Z",
                    "industry": {
                      "id": "b1c2d3e4-f5a6-7890-abcd-ef1234567890",
                      "name": "Game",
                      "slug": "game",
                      "createdAt": "2025-05-07T08:11:04.000Z",
                      "updatedAt": "2025-05-07T08:11:04.000Z"
                    },
                    "category": {
                      "id": "c1d2e3f4-a5b6-7890-abcd-ef1234567890",
                      "name": "Mobile Game",
                      "slug": "mobile-game",
                      "createdAt": "2025-05-07T08:11:04.000Z",
                      "updatedAt": "2025-05-07T08:11:04.000Z",
                      "industrySlug": "game"
                    },
                    "source": {
                      "id": "d1e2f3a4-b5c6-7890-abcd-ef1234567890",
                      "name": "Direct Sale",
                      "slug": "direct-sale",
                      "createdAt": "2025-05-07T08:11:04.000Z",
                      "updatedAt": "2025-05-07T08:11:04.000Z",
                      "industrySlug": "game"
                    },
                    "channel": {
                      "id": "e1f2a3b4-c5d6-7890-abcd-ef1234567890",
                      "name": "App Store",
                      "slug": "app-store",
                      "createdAt": "2025-05-07T08:11:04.000Z",
                      "updatedAt": "2025-05-07T08:11:04.000Z",
                      "industrySlug": "game"
                    },
                    "segment": {
                      "id": "f1a2b3c4-d5e6-7890-abcd-ef1234567890",
                      "name": "Casual",
                      "slug": "casual",
                      "createdAt": "2025-05-07T08:11:04.000Z",
                      "updatedAt": "2025-05-07T08:11:04.000Z",
                      "industrySlug": "game"
                    },
                    "company": {
                      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                      "juristicId": "1234567890123",
                      "nameTh": "บริษัท ทดสอบ จำกัด",
                      "nameEn": "Test Company Ltd."
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Revenue stream record not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Revenue stream with ID a1b2c3d4-e5f6-7890-abcd-ef1234567890 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a specific revenue stream record by ID",
        "tags": [
          "Revenue Stream"
        ]
      },
      "put": {
        "operationId": "updateRevenueStream",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the revenue stream record to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRevenueStreamDto"
              },
              "examples": {
                "example1": {
                  "summary": "Update revenue stream",
                  "description": "Example payload for updating a revenue stream record",
                  "value": {
                    "value": 1500000,
                    "percent": 30,
                    "ctrPercent": 18.5
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The revenue stream record has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "year": 2025,
                    "industryTypeSlug": "game",
                    "categorySlug": "mobile-game",
                    "sourceSlug": "direct-sale",
                    "channelSlug": "app-store",
                    "segmentSlug": "casual",
                    "percent": 30,
                    "ctrPercent": 18.5,
                    "value": 1500000,
                    "companyJuristicId": "1234567890123",
                    "createdAt": "2025-05-11T08:21:18.000Z",
                    "updatedAt": "2025-05-12T10:15:22.000Z",
                    "industry": {
                      "name": "Game",
                      "slug": "game"
                    },
                    "category": {
                      "name": "Mobile Game",
                      "slug": "mobile-game"
                    },
                    "source": {
                      "name": "Direct Sale",
                      "slug": "direct-sale"
                    },
                    "channel": {
                      "name": "App Store",
                      "slug": "app-store"
                    },
                    "segment": {
                      "name": "Casual",
                      "slug": "casual"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Revenue stream record not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Revenue stream with ID a1b2c3d4-e5f6-7890-abcd-ef1234567890 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a revenue stream record",
        "tags": [
          "Revenue Stream"
        ]
      },
      "delete": {
        "operationId": "deleteRevenueStream",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the revenue stream record to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The revenue stream record has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "year": 2025,
                    "industryTypeSlug": "game",
                    "categorySlug": "mobile-game",
                    "sourceSlug": "direct-sale",
                    "channelSlug": "app-store",
                    "segmentSlug": "casual",
                    "percent": 25.5,
                    "ctrPercent": 15.75,
                    "value": 1250000,
                    "companyJuristicId": "1234567890123",
                    "createdAt": "2025-05-11T08:21:18.000Z",
                    "updatedAt": "2025-05-11T08:21:18.000Z"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Revenue stream record not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Revenue stream with ID a1b2c3d4-e5f6-7890-abcd-ef1234567890 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a revenue stream record",
        "tags": [
          "Revenue Stream"
        ]
      }
    },
    "/revenue-stream/bulk": {
      "post": {
        "operationId": "createBulkRevenueStreams",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateRevenueStreamDto"
                }
              },
              "examples": {
                "example1": {
                  "summary": "Bulk revenue stream creation",
                  "description": "Example payload for creating multiple revenue streams",
                  "value": [
                    {
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "mobile-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "app-store",
                      "segmentSlug": "casual",
                      "percent": 25.5,
                      "ctrPercent": 15.75,
                      "value": 1250000,
                      "companyJuristicId": "1234567890123"
                    },
                    {
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "console-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "playstation-store",
                      "segmentSlug": "action",
                      "percent": 35,
                      "ctrPercent": 22.5,
                      "value": 1750000,
                      "companyJuristicId": "1234567890123"
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The revenue stream records have been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "mobile-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "app-store",
                      "segmentSlug": "casual",
                      "percent": 25.5,
                      "ctrPercent": 15.75,
                      "value": 1250000,
                      "companyJuristicId": "1234567890123",
                      "createdAt": "2025-05-11T08:21:18.000Z",
                      "updatedAt": "2025-05-11T08:21:18.000Z",
                      "industry": {
                        "name": "Game",
                        "slug": "game"
                      },
                      "category": {
                        "name": "Mobile Game",
                        "slug": "mobile-game"
                      },
                      "source": {
                        "name": "Direct Sale",
                        "slug": "direct-sale"
                      },
                      "channel": {
                        "name": "App Store",
                        "slug": "app-store"
                      },
                      "segment": {
                        "name": "Casual",
                        "slug": "casual"
                      }
                    },
                    {
                      "id": "b2c3d4e5-f6a7-8901-bcde-f12345678901",
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "console-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "playstation-store",
                      "segmentSlug": "action",
                      "percent": 35,
                      "ctrPercent": 22.5,
                      "value": 1750000,
                      "companyJuristicId": "1234567890123",
                      "createdAt": "2025-05-11T08:21:18.000Z",
                      "updatedAt": "2025-05-11T08:21:18.000Z",
                      "industry": {
                        "name": "Game",
                        "slug": "game"
                      },
                      "category": {
                        "name": "Console Game",
                        "slug": "console-game"
                      },
                      "source": {
                        "name": "Direct Sale",
                        "slug": "direct-sale"
                      },
                      "channel": {
                        "name": "PlayStation Store",
                        "slug": "playstation-store"
                      },
                      "segment": {
                        "name": "Action",
                        "slug": "action"
                      }
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create multiple revenue stream records",
        "tags": [
          "Revenue Stream"
        ]
      }
    },
    "/revenue-stream/{id}/value": {
      "patch": {
        "operationId": "updateRevenueStreamValue",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the revenue stream record",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRevenueValueDto"
              },
              "examples": {
                "example1": {
                  "summary": "Update revenue value",
                  "description": "Example payload for updating just the value field",
                  "value": {
                    "value": 1500000
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The value has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                    "year": 2025,
                    "industryTypeSlug": "game",
                    "categorySlug": "mobile-game",
                    "sourceSlug": "direct-sale",
                    "channelSlug": "app-store",
                    "segmentSlug": "casual",
                    "percent": 25.5,
                    "ctrPercent": 15.75,
                    "value": 1500000,
                    "companyJuristicId": "1234567890123",
                    "createdAt": "2025-05-11T08:21:18.000Z",
                    "updatedAt": "2025-05-12T10:15:22.000Z"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Revenue stream record not found",
            "content": {
              "application/json": {
                "schema": {
                  "example": {
                    "statusCode": 404,
                    "message": "Revenue stream with ID a1b2c3d4-e5f6-7890-abcd-ef1234567890 not found",
                    "error": "Not Found"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update just the value of a revenue stream record",
        "tags": [
          "Revenue Stream"
        ]
      }
    },
    "/revenue-stream/bulk-values": {
      "post": {
        "operationId": "bulkUpsertRevenueStreamValues",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UpdateRevenueValueDto"
                }
              },
              "examples": {
                "example1": {
                  "summary": "Bulk update revenue values",
                  "description": "Example payload for updating multiple revenue values",
                  "value": [
                    {
                      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                      "value": 1500000
                    },
                    {
                      "companyJuristicId": "1234567890123",
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "pc-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "steam",
                      "segmentSlug": "rpg",
                      "percent": 40,
                      "ctrPercent": 25,
                      "value": 2000000
                    }
                  ]
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The values have been successfully updated or created",
            "content": {
              "application/json": {
                "schema": {
                  "example": [
                    {
                      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "mobile-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "app-store",
                      "segmentSlug": "casual",
                      "percent": 25.5,
                      "ctrPercent": 15.75,
                      "value": 1500000,
                      "companyJuristicId": "1234567890123",
                      "createdAt": "2025-05-11T08:21:18.000Z",
                      "updatedAt": "2025-05-12T10:15:22.000Z"
                    },
                    {
                      "id": "c3d4e5f6-a7b8-9012-cdef-123456789012",
                      "year": 2025,
                      "industryTypeSlug": "game",
                      "categorySlug": "pc-game",
                      "sourceSlug": "direct-sale",
                      "channelSlug": "steam",
                      "segmentSlug": "rpg",
                      "percent": 40,
                      "ctrPercent": 25,
                      "value": 2000000,
                      "companyJuristicId": "1234567890123",
                      "createdAt": "2025-05-12T10:15:22.000Z",
                      "updatedAt": "2025-05-12T10:15:22.000Z"
                    }
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Bulk update or create revenue stream values",
        "tags": [
          "Revenue Stream"
        ]
      }
    },
    "/company-revenue": {
      "get": {
        "operationId": "getAllCompanyRevenues",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for numeric fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., year:asc, total:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria (e.g., year)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a paginated list of company revenue records"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all company revenue data with filtering and pagination",
        "tags": [
          "Company Revenue"
        ]
      },
      "post": {
        "operationId": "createCompanyRevenue",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCompanyRevenueDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The company revenue record has been successfully created or updated"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create or update company revenue data",
        "tags": [
          "Company Revenue"
        ]
      }
    },
    "/company-revenue/company/{companyId}": {
      "get": {
        "operationId": "getCompanyRevenuesByCompanyId",
        "parameters": [
          {
            "name": "companyId",
            "required": true,
            "in": "path",
            "description": "The ID of the company",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for numeric fields",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., year:asc, total:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria in JSON format or as query parameters",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return revenue data for the specified company"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get revenue data for a specific company with filtering and pagination",
        "tags": [
          "Company Revenue"
        ]
      }
    },
    "/portfolio/all": {
      "get": {
        "operationId": "getAllPortfolios",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for title and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., title:asc, createdAt:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria (e.g., industryTypeSlug)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved all portfolios"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all portfolios without pagination",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio": {
      "get": {
        "operationId": "getPortfolios",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for title and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., title:asc, createdAt:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria (e.g., industryTypeSlug)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved portfolios",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ResponseMetadata"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all portfolios with pagination, filtering, sorting, and search capabilities",
        "tags": [
          "Portfolio"
        ]
      },
      "post": {
        "operationId": "createPortfolio",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePortfolioWithImagesAndStandardsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Portfolio created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new portfolio with images and standards",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/{id}": {
      "get": {
        "operationId": "getPortfolioById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Portfolio ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved portfolio"
          },
          "404": {
            "description": "Portfolio not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get portfolio by ID",
        "tags": [
          "Portfolio"
        ]
      },
      "delete": {
        "operationId": "deletePortfolio",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Portfolio ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Portfolio deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - not allowed to delete this portfolio"
          },
          "404": {
            "description": "Portfolio not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a portfolio",
        "tags": [
          "Portfolio"
        ]
      },
      "patch": {
        "operationId": "updatePortfolio",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Portfolio ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortfolioDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Portfolio updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Portfolio not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a portfolio with images and standards",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/company/{companyJuristicId}": {
      "get": {
        "operationId": "getPortfoliosByCompanyJuristicId",
        "parameters": [
          {
            "name": "companyJuristicId",
            "required": true,
            "in": "path",
            "description": "Company juristic ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved portfolios for company"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get portfolios by company juristic ID",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/freelance/{freelanceId}": {
      "get": {
        "operationId": "getPortfoliosByFreelanceId",
        "parameters": [
          {
            "name": "freelanceId",
            "required": true,
            "in": "path",
            "description": "Freelance ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved portfolios for freelancer"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get portfolios by freelance ID",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/industry/{industrySlug}": {
      "get": {
        "operationId": "getPortfoliosByIndustry",
        "parameters": [
          {
            "name": "industrySlug",
            "required": true,
            "in": "path",
            "description": "Industry slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved portfolios for industry",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PortfolioByIndustryResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get portfolios by industry",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/favorite": {
      "post": {
        "operationId": "togglePortfolioFavorite",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FavoritePortfolioDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Favorite status toggled successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Toggle favorite status for a portfolio",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/favorite/{portfolioId}": {
      "get": {
        "operationId": "getPortfolioFavoriteStatus",
        "parameters": [
          {
            "name": "portfolioId",
            "required": true,
            "in": "path",
            "description": "Portfolio ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved favorite status"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get favorite status for a portfolio",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/favorites/user": {
      "get": {
        "operationId": "getUserFavoritePortfolios",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved user favorite portfolios"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get user favorite portfolios",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/{portfolioId}/comments": {
      "get": {
        "operationId": "getPortfolioComments",
        "parameters": [
          {
            "name": "portfolioId",
            "required": true,
            "in": "path",
            "description": "Portfolio ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns list of comments for the portfolio"
          },
          "404": {
            "description": "Portfolio not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get comments for a portfolio",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/comments": {
      "post": {
        "operationId": "createPortfolioComment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCommentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment created successfully"
          },
          "401": {
            "description": "Unauthorized - must be logged in"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Create a new comment on a portfolio",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/comments/{commentId}": {
      "patch": {
        "operationId": "updatePortfolioComment",
        "parameters": [
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "content": {
                    "type": "string"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Comment updated successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - not your comment"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing comment",
        "tags": [
          "Portfolio"
        ]
      },
      "delete": {
        "operationId": "deletePortfolioComment",
        "parameters": [
          {
            "name": "commentId",
            "required": true,
            "in": "path",
            "description": "Comment ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Comment deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden - not allowed to delete this comment"
          }
        },
        "security": [
          {
            "bearer": []
          },
          {
            "bearer": []
          }
        ],
        "summary": "Delete a comment",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/portfolio/random": {
      "get": {
        "operationId": "getRandomPortfolios",
        "parameters": [
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Number of random portfolios to return (default 10)",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get random portfolios",
        "tags": [
          "Portfolio"
        ]
      }
    },
    "/upload": {
      "post": {
        "operationId": "uploadSingleFile",
        "parameters": [
          {
            "name": "folder",
            "required": false,
            "in": "query",
            "description": "Optional folder name to organize uploads",
            "schema": {
              "example": "portfolio",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "File upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "The file to upload (image files only)"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SingleUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "File validation failed or upload error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Upload a single file",
        "tags": [
          "Upload"
        ]
      }
    },
    "/upload/multiple": {
      "post": {
        "operationId": "uploadMultipleFiles",
        "parameters": [
          {
            "name": "folder",
            "required": false,
            "in": "query",
            "description": "Optional folder name to organize uploads",
            "schema": {
              "example": "portfolio",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Multiple file upload",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "binary"
                    },
                    "description": "Array of files to upload (up to 10 image files)"
                  }
                },
                "required": [
                  "files"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Files uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MultipleUploadResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "File validation failed or upload error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "summary": "Upload multiple files",
        "tags": [
          "Upload"
        ]
      }
    },
    "/standards": {
      "get": {
        "description": "Retrieves all standards with pagination, filtering and sorting",
        "operationId": "getStandards",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for name and description",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction (e.g., name:asc, createdAt:desc)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria (e.g., type, industrySlug)",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all standards retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all standards",
        "tags": [
          "Standards"
        ]
      },
      "post": {
        "operationId": "createStandard",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Standard creation data with optional image",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "industrySlug": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Optional image file"
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Standard created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new standard with optional image",
        "tags": [
          "Standards"
        ]
      }
    },
    "/standards/all": {
      "get": {
        "operationId": "getAllStandards",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All standards retrieved successfully"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all standards (no pagination)",
        "tags": [
          "Standards"
        ]
      }
    },
    "/standards/{id}": {
      "patch": {
        "operationId": "updateStandard",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Standard ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Standard update data with optional image",
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "industrySlug": {
                    "type": "string"
                  },
                  "image": {
                    "type": "string",
                    "format": "binary",
                    "description": "Optional image file"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Standard updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Standard not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update a standard with optional image",
        "tags": [
          "Standards"
        ]
      },
      "delete": {
        "operationId": "deleteStandard",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Standard ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Standard not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a standard by ID",
        "tags": [
          "Standards"
        ]
      },
      "get": {
        "operationId": "getStandardById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Standard ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Standard retrieved successfully"
          },
          "404": {
            "description": "Standard not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a standard by ID",
        "tags": [
          "Standards"
        ]
      }
    },
    "/industry": {
      "post": {
        "operationId": "createIndustry",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Industry data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIndustryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Industry has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new industry",
        "tags": [
          "Industry"
        ]
      },
      "get": {
        "operationId": "getIndustries",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of all industries with categories, sources, and channels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryListResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all industries with their associated data",
        "tags": [
          "Industry"
        ]
      }
    },
    "/industry/all": {
      "get": {
        "operationId": "findAllIndustries",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of all industries",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all industries",
        "tags": [
          "Industry"
        ]
      }
    },
    "/industry/{id}": {
      "get": {
        "operationId": "findIndustryById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Industry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Industry details including related entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryWithRelationsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Industry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an industry by ID",
        "tags": [
          "Industry"
        ]
      },
      "put": {
        "operationId": "updateIndustry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Industry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Industry data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIndustryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Industry has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Industry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an industry",
        "tags": [
          "Industry"
        ]
      },
      "delete": {
        "operationId": "deleteIndustry",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Industry ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Industry has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Industry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete an industry",
        "tags": [
          "Industry"
        ]
      }
    },
    "/industry/slug/{slug}": {
      "get": {
        "operationId": "findIndustryBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Industry slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Industry details including related entities",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IndustryWithRelationsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Industry not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get an industry by slug",
        "tags": [
          "Industry"
        ]
      }
    },
    "/industry/skills": {
      "post": {
        "operationId": "createSkill",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Skill data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSkillDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The skill has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new skill",
        "tags": [
          "Industry - Skills"
        ]
      }
    },
    "/industry/skills/all": {
      "get": {
        "operationId": "findAllSkills",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of items to skip for pagination",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of items to take for pagination",
            "schema": {
              "minimum": 1,
              "type": "number"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter skills by industry slug",
            "schema": {
              "example": "game",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of skills matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all skills with optional filtering",
        "tags": [
          "Industry - Skills"
        ]
      }
    },
    "/industry/skills/{slug}": {
      "get": {
        "operationId": "findSkillBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Skill slug identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Optional industry slug to filter by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The skill data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Skill not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a skill by its slug",
        "tags": [
          "Industry - Skills"
        ]
      },
      "put": {
        "operationId": "updateSkill",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Skill slug identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Skill data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSkillDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The skill has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Skill not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing skill",
        "tags": [
          "Industry - Skills"
        ]
      },
      "delete": {
        "operationId": "deleteSkill",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Skill slug identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The skill has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SkillResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Skill not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a skill",
        "tags": [
          "Industry - Skills"
        ]
      }
    },
    "/industry/tags": {
      "post": {
        "operationId": "createTag",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Tag data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The tag has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new tag",
        "tags": [
          "Industry - Tags"
        ]
      }
    },
    "/industry/tags/all": {
      "get": {
        "operationId": "findAllTags",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of items to skip for pagination",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of items to take for pagination",
            "schema": {
              "minimum": 1,
              "type": "number"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter tags by industry slug",
            "schema": {
              "example": "game",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of tags matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all tags with optional filtering",
        "tags": [
          "Industry - Tags"
        ]
      }
    },
    "/industry/tags/{slug}": {
      "get": {
        "operationId": "findTagBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Tag slug identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Optional industry slug to filter by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a tag by its slug",
        "tags": [
          "Industry - Tags"
        ]
      },
      "put": {
        "operationId": "updateTag",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Tag slug identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Tag data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The tag has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing tag",
        "tags": [
          "Industry - Tags"
        ]
      },
      "delete": {
        "operationId": "deleteTag",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Tag slug identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The tag has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TagResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Tag not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a tag",
        "tags": [
          "Industry - Tags"
        ]
      }
    },
    "/industry/channels": {
      "post": {
        "operationId": "createChannel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Channel data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The channel has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new channel",
        "tags": [
          "Industry - Channels"
        ]
      }
    },
    "/industry/channels/all": {
      "get": {
        "operationId": "findAllChannels",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of items to skip for pagination",
            "schema": {
              "minimum": 0,
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of items to take for pagination",
            "schema": {
              "minimum": 1,
              "type": "number"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter channels by industry slug",
            "schema": {
              "example": "game",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of channels matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all channels with optional filtering",
        "tags": [
          "Industry - Channels"
        ]
      }
    },
    "/industry/channels/{slug}": {
      "get": {
        "operationId": "findChannelBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Channel slug identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Optional industry slug to filter by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a channel by its slug",
        "tags": [
          "Industry - Channels"
        ]
      },
      "put": {
        "operationId": "updateChannel",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Channel slug identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Channel data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The channel has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing channel",
        "tags": [
          "Industry - Channels"
        ]
      },
      "delete": {
        "operationId": "deleteChannel",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Channel slug identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The channel has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChannelResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a channel",
        "tags": [
          "Industry - Channels"
        ]
      }
    },
    "/industry/categories": {
      "post": {
        "operationId": "createCategory",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Category data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The category has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new category",
        "tags": [
          "Industry - Categories"
        ]
      }
    },
    "/industry/categories/all": {
      "get": {
        "operationId": "findAllCategories",
        "parameters": [
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter by industry slug",
            "schema": {
              "example": "game",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name or slug",
            "schema": {
              "example": "mobile",
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of categories matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all categories with optional filtering",
        "tags": [
          "Industry - Categories"
        ]
      }
    },
    "/industry/categories/{slug}": {
      "get": {
        "operationId": "findCategoryBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Category slug identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Optional industry slug to filter by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The category data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a category by its slug",
        "tags": [
          "Industry - Categories"
        ]
      },
      "put": {
        "operationId": "updateCategory",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Category slug identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Category data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCategoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The category has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing category",
        "tags": [
          "Industry - Categories"
        ]
      },
      "delete": {
        "operationId": "deleteCategory",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Category slug identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The category has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Category not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a category",
        "tags": [
          "Industry - Categories"
        ]
      }
    },
    "/industry/sources": {
      "post": {
        "operationId": "createSource",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Source data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSourceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The source has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new source",
        "tags": [
          "Industry - Sources"
        ]
      }
    },
    "/industry/sources/all": {
      "get": {
        "operationId": "findAllSources",
        "parameters": [
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter by industry slug",
            "schema": {
              "example": "game",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name or slug",
            "schema": {
              "example": "steam",
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of sources matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all sources with optional filtering",
        "tags": [
          "Industry - Sources"
        ]
      }
    },
    "/industry/sources/{slug}": {
      "get": {
        "operationId": "findSourceBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Source slug identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Optional industry slug to filter by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The source data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a source by its slug",
        "tags": [
          "Industry - Sources"
        ]
      },
      "put": {
        "operationId": "updateSource",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Source slug identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Source data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSourceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The source has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing source",
        "tags": [
          "Industry - Sources"
        ]
      },
      "delete": {
        "operationId": "deleteSource",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Source slug identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The source has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SourceResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Source not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a source",
        "tags": [
          "Industry - Sources"
        ]
      }
    },
    "/industry/segments": {
      "post": {
        "operationId": "createSegment",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Segment data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSegmentDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The segment has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new segment",
        "tags": [
          "Industry - Segments"
        ]
      }
    },
    "/industry/segments/all": {
      "get": {
        "operationId": "findAllSegments",
        "parameters": [
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter by industry slug",
            "schema": {
              "example": "game",
              "type": "string"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by name or slug",
            "schema": {
              "example": "casual",
              "type": "string"
            }
          },
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of records to skip",
            "schema": {
              "example": 0,
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of records to take",
            "schema": {
              "example": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of segments matching the query criteria",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all segments with optional filtering",
        "tags": [
          "Industry - Segments"
        ]
      }
    },
    "/industry/segments/{slug}": {
      "get": {
        "operationId": "findSegmentBySlug",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Segment slug identifier",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Optional industry slug to filter by",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The segment data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Segment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get a segment by its slug",
        "tags": [
          "Industry - Segments"
        ]
      },
      "put": {
        "operationId": "updateSegment",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Segment slug identifier to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Segment data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSegmentDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The segment has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Segment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update an existing segment",
        "tags": [
          "Industry - Segments"
        ]
      },
      "delete": {
        "operationId": "deleteSegment",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Segment slug identifier to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The segment has been successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SegmentResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Segment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete a segment",
        "tags": [
          "Industry - Segments"
        ]
      }
    },
    "/industry/project-tags": {
      "post": {
        "operationId": "ProjectTagController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProjectTagDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The project tag has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Project tag already exists."
          }
        },
        "summary": "Create a new project tag",
        "tags": [
          "Project Tags"
        ]
      }
    },
    "/industry/project-tags/all": {
      "get": {
        "operationId": "ProjectTagController_findAll",
        "parameters": [
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Industry slug to filter project tags",
            "schema": {
              "example": "technology",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Project tag name to search for",
            "schema": {
              "example": "Gaming",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all project tags.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTagResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all project tags",
        "tags": [
          "Project Tags"
        ]
      }
    },
    "/industry/project-tags/{slug}": {
      "get": {
        "operationId": "ProjectTagController_findOne",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Project tag slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the project tag.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Project tag not found."
          }
        },
        "summary": "Get a project tag by slug",
        "tags": [
          "Project Tags"
        ]
      },
      "put": {
        "operationId": "ProjectTagController_update",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Project tag slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProjectTagDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The project tag has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Project tag not found."
          },
          "409": {
            "description": "Project tag slug already exists."
          }
        },
        "summary": "Update a project tag",
        "tags": [
          "Project Tags"
        ]
      },
      "delete": {
        "operationId": "ProjectTagController_remove",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Project tag slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The project tag has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTagResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Project tag not found."
          }
        },
        "summary": "Delete a project tag",
        "tags": [
          "Project Tags"
        ]
      }
    },
    "/industry/standards": {
      "post": {
        "operationId": "StandardsController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateStandardsDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The standards has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardsResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Standards already exists."
          }
        },
        "summary": "Create a new standards",
        "tags": [
          "Standards"
        ]
      }
    },
    "/industry/standards/all": {
      "get": {
        "operationId": "StandardsController_findAll",
        "parameters": [
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Industry slug to filter standards",
            "schema": {
              "example": "technology",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Standards name to search for",
            "schema": {
              "example": "ESRB",
              "type": "string"
            }
          },
          {
            "name": "type",
            "required": false,
            "in": "query",
            "description": "Standards type to filter by",
            "schema": {
              "example": "ESRB",
              "type": "string",
              "enum": [
                "ERSB",
                "PEGI",
                "CERO",
                "USK",
                "ACB",
                "IARC",
                "GRAC",
                "VSC",
                "OFLC",
                "BBFC",
                "FPB",
                "RARS",
                "GSRB",
                "GSRR",
                "MPA",
                "EIRIN",
                "NBTC",
                "ESRB"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all standards.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StandardsResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all standards",
        "tags": [
          "Standards"
        ]
      }
    },
    "/industry/standards/{id}": {
      "get": {
        "operationId": "StandardsController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Standards ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the standards.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Standards not found."
          }
        },
        "summary": "Get a standards by ID",
        "tags": [
          "Standards"
        ]
      },
      "put": {
        "operationId": "StandardsController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Standards ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateStandardsDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The standards has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Standards not found."
          }
        },
        "summary": "Update a standards",
        "tags": [
          "Standards"
        ]
      },
      "delete": {
        "operationId": "StandardsController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Standards ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The standards has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StandardsResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Standards not found."
          }
        },
        "summary": "Delete a standards",
        "tags": [
          "Standards"
        ]
      }
    },
    "/industry/looking-for": {
      "post": {
        "operationId": "LookingForController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLookingForDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The looking for has been successfully created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookingForResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request."
          },
          "409": {
            "description": "Looking for already exists."
          }
        },
        "summary": "Create a new looking for",
        "tags": [
          "Looking For"
        ]
      }
    },
    "/industry/looking-for/all": {
      "get": {
        "operationId": "LookingForController_findAll",
        "parameters": [
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Industry slug to filter looking for items",
            "schema": {
              "example": "technology",
              "type": "string"
            }
          },
          {
            "name": "name",
            "required": false,
            "in": "query",
            "description": "Looking for name to search for",
            "schema": {
              "example": "Developer",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all looking for items.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LookingForResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all looking for items",
        "tags": [
          "Looking For"
        ]
      }
    },
    "/industry/looking-for/{slug}": {
      "get": {
        "operationId": "LookingForController_findOne",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Looking for slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the looking for.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookingForResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Looking for not found."
          }
        },
        "summary": "Get a looking for by slug",
        "tags": [
          "Looking For"
        ]
      },
      "put": {
        "operationId": "LookingForController_update",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Looking for slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLookingForDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The looking for has been successfully updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookingForResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Looking for not found."
          },
          "409": {
            "description": "Looking for slug already exists."
          }
        },
        "summary": "Update a looking for",
        "tags": [
          "Looking For"
        ]
      },
      "delete": {
        "operationId": "LookingForController_remove",
        "parameters": [
          {
            "name": "slug",
            "required": true,
            "in": "path",
            "description": "Looking for slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The looking for has been successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LookingForResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Looking for not found."
          }
        },
        "summary": "Delete a looking for",
        "tags": [
          "Looking For"
        ]
      }
    },
    "/freelance": {
      "get": {
        "operationId": "getFreelances",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (default: 1)",
            "schema": {
              "default": 1,
              "example": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page (default: 10)",
            "schema": {
              "default": 10,
              "example": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for freelancer name or skills",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Field to sort by, with optional direction (e.g., \"name:asc\", \"createdAt:desc\")",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria in JSON format or as query parameters",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return a paginated list of freelances with their details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreelanceListResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all freelances with filtering and pagination",
        "tags": [
          "Freelance"
        ]
      },
      "post": {
        "operationId": "createFreelance",
        "parameters": [],
        "requestBody": {
          "required": true,
          "description": "Freelance data to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFreelanceDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The freelance has been successfully created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreelanceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create new freelance",
        "tags": [
          "Freelance"
        ]
      }
    },
    "/freelance/all": {
      "get": {
        "operationId": "getAllFreelances",
        "parameters": [
          {
            "name": "industry",
            "required": false,
            "in": "query",
            "description": "Filter freelances by industry",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return all freelances matching the optional industry filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FreelanceWithPortfolioResponseDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get all freelances with optional industry filter",
        "tags": [
          "Freelance"
        ]
      }
    },
    "/freelance/user/{userId}": {
      "get": {
        "operationId": "getFreelanceByUserId",
        "parameters": [
          {
            "name": "userId",
            "required": true,
            "in": "path",
            "description": "The user ID of the freelance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the freelance with the specified user ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreelanceWithUserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Freelance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get freelance by user ID",
        "tags": [
          "Freelance"
        ]
      }
    },
    "/freelance/{id}": {
      "get": {
        "operationId": "getFreelanceById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The ID of the freelance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the freelance with the specified ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreelanceWithPortfolioResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Freelance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get freelance by ID",
        "tags": [
          "Freelance"
        ]
      }
    },
    "/freelance/juristic/{juristicId}": {
      "get": {
        "operationId": "getFreelanceByJuristicId",
        "parameters": [
          {
            "name": "juristicId",
            "required": true,
            "in": "path",
            "description": "The juristic ID of the freelance",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Return the freelance with the specified juristic ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreelanceWithUserResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Freelance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get freelance by juristic ID",
        "tags": [
          "Freelance"
        ]
      }
    },
    "/freelance/{freelanceId}": {
      "patch": {
        "operationId": "updateFreelance",
        "parameters": [
          {
            "name": "freelanceId",
            "required": true,
            "in": "path",
            "description": "The ID of the freelance to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Freelance data to update",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFreelanceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The freelance has been successfully updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FreelanceResponseDto"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationErrorResponseDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizedErrorResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "Freelance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundErrorResponseDto"
                }
              }
            }
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update freelance details",
        "tags": [
          "Freelance"
        ]
      }
    },
    "/auth/techhunt-login": {
      "post": {
        "operationId": "techHuntLogin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TechhuntLoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "TechHunt login successful"
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Login through TechHunt API",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/admin/signup": {
      "post": {
        "operationId": "adminSignup",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminSignupDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Admin successfully registered",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "description": "Email or username already exists"
          }
        },
        "summary": "Admin signup",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/admin/signin": {
      "post": {
        "operationId": "adminSignin",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AdminSigninDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "admin": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "username": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        }
                      }
                    },
                    "access_token": {
                      "type": "string"
                    },
                    "refresh_token": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "Admin signin",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/refresh": {
      "post": {
        "operationId": "refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully"
          },
          "401": {
            "description": "Invalid or expired refresh token"
          }
        },
        "summary": "Refresh access token using refresh token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/admin/me": {
      "get": {
        "operationId": "getAdminProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Admin profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "username": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "updatedAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Get current admin profile",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout": {
      "post": {
        "operationId": "logout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logged out successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Log out and revoke refresh token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/admin/logout": {
      "post": {
        "operationId": "adminLogout",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Admin logged out successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Admin log out and revoke refresh token",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/logout-all": {
      "post": {
        "operationId": "logoutAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All sessions logged out successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Log out from all devices by revoking all refresh tokens",
        "tags": [
          "Auth"
        ]
      }
    },
    "/auth/admin/logout-all": {
      "post": {
        "operationId": "adminLogoutAll",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All admin sessions logged out successfully"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Admin log out from all devices by revoking all admin refresh tokens",
        "tags": [
          "Auth"
        ]
      }
    },
    "/channel": {
      "post": {
        "operationId": "createChannel",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateChannelDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Channel created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new channel",
        "tags": [
          "Channel"
        ]
      },
      "get": {
        "operationId": "getChannels",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number (1-based)",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "Sort field and direction",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "Filter criteria in JSON format or as query parameters",
            "schema": {
              "$ref": "#/components/schemas/Object"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of channels"
          }
        },
        "summary": "Get all channels with pagination, filtering, and sorting",
        "tags": [
          "Channel"
        ]
      }
    },
    "/channel/{id}": {
      "get": {
        "operationId": "getChannelById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Channel ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel found"
          },
          "404": {
            "description": "Channel not found"
          }
        },
        "summary": "Get channel by ID",
        "tags": [
          "Channel"
        ]
      },
      "put": {
        "operationId": "updateChannel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Channel ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateChannelDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Channel updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Channel not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update channel by ID",
        "tags": [
          "Channel"
        ]
      },
      "delete": {
        "operationId": "deleteChannel",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Channel ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Channel deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Channel not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete channel by ID",
        "tags": [
          "Channel"
        ]
      }
    },
    "/looking-for": {
      "post": {
        "operationId": "createLookingFor",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLookingForDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Looking for item created successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Create a new looking for item",
        "tags": [
          "Looking For"
        ]
      },
      "get": {
        "operationId": "getLookingForItems",
        "parameters": [
          {
            "name": "skip",
            "required": false,
            "in": "query",
            "description": "Number of items to skip",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "take",
            "required": false,
            "in": "query",
            "description": "Number of items to take",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search term for name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "industrySlug",
            "required": false,
            "in": "query",
            "description": "Filter by industry slug",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved looking for items"
          }
        },
        "summary": "Get looking for items with filtering and pagination",
        "tags": [
          "Looking For"
        ]
      }
    },
    "/looking-for/all": {
      "get": {
        "operationId": "getAllLookingForItems",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Successfully retrieved all looking for items"
          }
        },
        "summary": "Get all looking for items without pagination",
        "tags": [
          "Looking For"
        ]
      }
    },
    "/looking-for/{id}": {
      "get": {
        "operationId": "getLookingForItemById",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Looking for item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved looking for item"
          },
          "404": {
            "description": "Looking for item not found"
          }
        },
        "summary": "Get looking for item by ID",
        "tags": [
          "Looking For"
        ]
      },
      "patch": {
        "operationId": "updateLookingFor",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Looking for item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLookingForDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Looking for item updated successfully"
          },
          "400": {
            "description": "Invalid input data"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Looking for item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Update looking for item by ID",
        "tags": [
          "Looking For"
        ]
      },
      "delete": {
        "operationId": "deleteLookingFor",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Looking for item ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Looking for item deleted successfully"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Looking for item not found"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ],
        "summary": "Delete looking for item by ID",
        "tags": [
          "Looking For"
        ]
      }
    }
  },
  "info": {
    "title": "DEPA API",
    "description": "The DEPA API documentation",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Auth",
      "description": "Authentication endpoints"
    },
    {
      "name": "Users",
      "description": "User management endpoints"
    },
    {
      "name": "Portfolio",
      "description": "Portfolio management endpoints"
    },
    {
      "name": "Company",
      "description": "Company management endpoints"
    },
    {
      "name": "Freelance",
      "description": "Freelance management endpoints"
    },
    {
      "name": "Health",
      "description": "Health check endpoints"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    }
  ],
  "components": {
    "securitySchemes": {
      "bearer": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http"
      }
    },
    "schemas": {
      "Object": {
        "type": "object",
        "properties": {}
      },
      "UserDataDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User unique identifier"
          },
          "fullnameTh": {
            "type": "string",
            "description": "User full name in Thai"
          },
          "fullnameEn": {
            "type": "string",
            "description": "User full name in English"
          },
          "email": {
            "type": "string",
            "description": "User email address"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User phone number"
          },
          "website": {
            "type": "string",
            "description": "User website"
          },
          "location": {
            "type": "string",
            "description": "User location"
          },
          "userType": {
            "type": "string",
            "description": "User type"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User last update date"
          },
          "company": {
            "type": "object",
            "description": "Associated company information",
            "properties": {
              "id": {
                "type": "string"
              },
              "nameTh": {
                "type": "string"
              },
              "nameEn": {
                "type": "string"
              },
              "juristicId": {
                "type": "string"
              }
            }
          },
          "freelance": {
            "type": "object",
            "description": "Associated freelance information",
            "properties": {
              "id": {
                "type": "string"
              },
              "firstNameTh": {
                "type": "string"
              },
              "lastNameTh": {
                "type": "string"
              },
              "firstNameEn": {
                "type": "string"
              },
              "lastNameEn": {
                "type": "string"
              },
              "juristicId": {
                "type": "string"
              }
            }
          },
          "industryTags": {
            "type": "array",
            "description": "User industry tags",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "industry": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "industryChannels": {
            "type": "array",
            "description": "User industry channels",
            "items": {
              "type": "object",
              "properties": {
                "channel": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "industry": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "industrySkills": {
            "type": "array",
            "description": "User industry skills",
            "items": {
              "type": "object",
              "properties": {
                "skill": {
                  "type": "object",
                  "properties": {
                    "title": {
                      "type": "string"
                    },
                    "slug": {
                      "type": "string"
                    },
                    "industry": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "slug": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "industriesRelated": {
            "type": "array",
            "description": "Related industries",
            "items": {
              "type": "object",
              "properties": {
                "industry": {
                  "type": "object"
                }
              }
            }
          }
        },
        "required": [
          "id",
          "email",
          "createdAt",
          "updatedAt"
        ]
      },
      "PaginationMetadataDto": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Current page number"
          },
          "limit": {
            "type": "number",
            "description": "Items per page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Has next page"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Has previous page"
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "pageCount",
          "hasNextPage",
          "hasPreviousPage"
        ]
      },
      "MultipleUsersResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of user data",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDataDto"
            }
          },
          "meta": {
            "description": "Pagination metadata",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetadataDto"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Users retrieved successfully"
          }
        },
        "required": [
          "data",
          "meta",
          "success",
          "message"
        ]
      },
      "UserErrorResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "description": "Error message",
            "oneOf": [
              {
                "type": "string",
                "example": "User not found"
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "example": [
                  "Email must be a valid email",
                  "Full name is required"
                ]
              }
            ]
          },
          "statusCode": {
            "type": "number",
            "description": "HTTP status code",
            "example": 400
          },
          "error": {
            "type": "string",
            "description": "Error type",
            "example": "Bad Request"
          },
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": false
          }
        },
        "required": [
          "message",
          "statusCode",
          "error",
          "success"
        ]
      },
      "SingleUserResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "User data",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDataDto"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "User retrieved successfully"
          }
        },
        "required": [
          "data",
          "success",
          "message"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "fullnameTh": {
            "type": "string",
            "description": "User full name in Thai"
          },
          "fullnameEn": {
            "type": "string",
            "description": "User full name in English"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User phone number"
          },
          "email": {
            "type": "string",
            "description": "User email address"
          },
          "website": {
            "type": "string",
            "description": "User website"
          },
          "location": {
            "type": "string",
            "description": "User location"
          },
          "industries": {
            "description": "Industries associated with the user",
            "example": [
              "Technology",
              "Healthcare"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "User tags",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "category": "skill",
                "name": "JavaScript"
              },
              {
                "category": "interest",
                "name": "AI"
              }
            ]
          },
          "channels": {
            "type": "array",
            "description": "User communication channels",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "category": "email",
                "name": "support@example.com"
              },
              {
                "category": "LINE",
                "name": "@username"
              }
            ]
          },
          "specialists": {
            "type": "array",
            "description": "User specializations",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "category": "programming",
                "name": "Backend Development"
              },
              {
                "category": "design",
                "name": "UX/UI"
              }
            ]
          }
        },
        "required": [
          "fullnameTh",
          "email",
          "industries",
          "channels",
          "specialists"
        ]
      },
      "CreateUserResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Created user data",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDataDto"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "User created successfully"
          }
        },
        "required": [
          "data",
          "success",
          "message"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "fullnameTh": {
            "type": "string",
            "description": "User full name in Thai"
          },
          "fullnameEn": {
            "type": "string",
            "description": "User full name in English"
          },
          "about": {
            "type": "string",
            "description": "About the user"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User phone number"
          },
          "website": {
            "type": "string",
            "description": "User website"
          },
          "location": {
            "type": "string",
            "description": "User location"
          },
          "industries": {
            "description": "Industries associated with the user",
            "example": [
              "technology",
              "healthcare"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "tags": {
            "type": "array",
            "description": "User tags",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "category": "skill",
                "name": "javascript"
              },
              {
                "category": "technology",
                "name": "react"
              }
            ]
          },
          "channels": {
            "type": "array",
            "description": "User channels",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "category": "social",
                "name": "linkedin"
              },
              {
                "category": "professional",
                "name": "github"
              }
            ]
          },
          "specialists": {
            "type": "array",
            "description": "User specialists/skills",
            "items": {
              "type": "object",
              "properties": {
                "category": {
                  "type": "string"
                },
                "name": {
                  "type": "string"
                }
              }
            },
            "example": [
              {
                "category": "programming",
                "name": "typescript"
              },
              {
                "category": "design",
                "name": "figma"
              }
            ]
          },
          "tags_array": {
            "description": "User tags array (simplified)",
            "example": [
              "javascript",
              "react",
              "typescript"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "channels_array": {
            "description": "User channels array (simplified)",
            "example": [
              "linkedin",
              "github",
              "behance"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "specialists_array": {
            "description": "User specialists array (simplified)",
            "example": [
              "typescript",
              "figma",
              "photoshop"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UpdateUserResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Updated user data",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserDataDto"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Operation success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "User updated successfully"
          }
        },
        "required": [
          "data",
          "success",
          "message"
        ]
      },
      "UserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "User unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "email": {
            "type": "string",
            "description": "User email address",
            "example": "user@example.com"
          },
          "firstName": {
            "type": "string",
            "description": "User first name",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "description": "User last name",
            "example": "Doe"
          },
          "phoneNumber": {
            "type": "string",
            "description": "User phone number",
            "example": "+66-123-456-789"
          },
          "role": {
            "type": "string",
            "description": "User role",
            "example": "COMPANY",
            "enum": [
              "COMPANY",
              "FREELANCE",
              "ADMIN"
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "User creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "User last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "email",
          "role",
          "createdAt",
          "updatedAt"
        ]
      },
      "CompanyWithUserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "juristicId": {
            "type": "string",
            "description": "Company juristic ID",
            "example": "1234567890123"
          },
          "nameTh": {
            "type": "string",
            "description": "Company name in Thai",
            "example": "บริษัท เทคโนโลยี จำกัด"
          },
          "nameEn": {
            "type": "string",
            "description": "Company name in English",
            "example": "Technology Company Limited"
          },
          "description": {
            "type": "string",
            "description": "Company description",
            "example": "A leading technology company specializing in software development"
          },
          "description_en": {
            "type": "string",
            "description": "Company description in English",
            "example": "A leading technology company specializing in software development"
          },
          "image": {
            "type": "string",
            "description": "Company logo image URL",
            "example": "https://example.com/logo.png"
          },
          "cover_image": {
            "type": "string",
            "description": "Company cover image URL",
            "example": "https://example.com/cover.jpg"
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "example": "123 Technology Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "registerdCapital": {
            "type": "number",
            "description": "Registered capital amount",
            "example": 1000000
          },
          "employeeCount": {
            "type": "number",
            "description": "Number of employees",
            "example": 50
          },
          "phoneNumber": {
            "type": "string",
            "description": "Company phone number",
            "example": "+66-2-123-4567"
          },
          "email": {
            "type": "string",
            "description": "Company email address",
            "example": "contact@company.com"
          },
          "website": {
            "type": "string",
            "description": "Company website URL",
            "example": "https://www.company.com"
          },
          "logo": {
            "type": "string",
            "description": "Company logo URL",
            "example": "https://example.com/logo.png"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "industries": {
            "description": "Legacy industries array",
            "example": [
              "technology",
              "software"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Company creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Company last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "user": {
            "description": "Associated user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "juristicId",
          "nameTh",
          "userId",
          "createdAt",
          "updatedAt",
          "user"
        ]
      },
      "CompanyListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of companies with pagination",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyWithUserResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "total": {
                "type": "number",
                "example": 100
              },
              "page": {
                "type": "number",
                "example": 1
              },
              "limit": {
                "type": "number",
                "example": 10
              },
              "totalPages": {
                "type": "number",
                "example": 10
              },
              "hasNext": {
                "type": "boolean",
                "example": true
              },
              "hasPrevious": {
                "type": "boolean",
                "example": false
              }
            },
            "additionalProperties": false
          }
        },
        "required": [
          "data",
          "meta"
        ]
      },
      "CompanyResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "juristicId": {
            "type": "string",
            "description": "Company juristic ID",
            "example": "1234567890123"
          },
          "nameTh": {
            "type": "string",
            "description": "Company name in Thai",
            "example": "บริษัท เทคโนโลยี จำกัด"
          },
          "nameEn": {
            "type": "string",
            "description": "Company name in English",
            "example": "Technology Company Limited"
          },
          "description": {
            "type": "string",
            "description": "Company description",
            "example": "A leading technology company specializing in software development"
          },
          "description_en": {
            "type": "string",
            "description": "Company description in English",
            "example": "A leading technology company specializing in software development"
          },
          "image": {
            "type": "string",
            "description": "Company logo image URL",
            "example": "https://example.com/logo.png"
          },
          "cover_image": {
            "type": "string",
            "description": "Company cover image URL",
            "example": "https://example.com/cover.jpg"
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "example": "123 Technology Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "registerdCapital": {
            "type": "number",
            "description": "Registered capital amount",
            "example": 1000000
          },
          "employeeCount": {
            "type": "number",
            "description": "Number of employees",
            "example": 50
          },
          "phoneNumber": {
            "type": "string",
            "description": "Company phone number",
            "example": "+66-2-123-4567"
          },
          "email": {
            "type": "string",
            "description": "Company email address",
            "example": "contact@company.com"
          },
          "website": {
            "type": "string",
            "description": "Company website URL",
            "example": "https://www.company.com"
          },
          "logo": {
            "type": "string",
            "description": "Company logo URL",
            "example": "https://example.com/logo.png"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "industries": {
            "description": "Legacy industries array",
            "example": [
              "technology",
              "software"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Company creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Company last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "juristicId",
          "nameTh",
          "userId",
          "createdAt",
          "updatedAt"
        ]
      },
      "NotFoundErrorResponseDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP status code",
            "example": 404
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Not Found"
          },
          "error": {
            "type": "string",
            "description": "Error description or detailed message",
            "example": "Validation failed"
          },
          "timestamp": {
            "type": "string",
            "description": "Request timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "path": {
            "type": "string",
            "description": "Request path",
            "example": "/api/company"
          }
        },
        "required": [
          "statusCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "CreateCompanyDto": {
        "type": "object",
        "properties": {
          "juristicId": {
            "type": "string",
            "description": "Company juristic ID",
            "example": "1234567890123"
          },
          "nameTh": {
            "type": "string",
            "description": "Company name in Thai",
            "example": "บริษัท เทคโนโลยี จำกัด"
          },
          "nameEn": {
            "type": "string",
            "description": "Company name in English",
            "example": "Technology Company Limited"
          },
          "description": {
            "type": "string",
            "description": "Company description",
            "example": "A leading technology company specializing in software development"
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "example": "123 Technology Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "registerdCapital": {
            "type": "number",
            "description": "Registered capital amount",
            "example": 1000000
          },
          "employeeCount": {
            "type": "number",
            "description": "Number of employees",
            "example": 50
          },
          "phoneNumber": {
            "type": "string",
            "description": "Company phone number",
            "example": "+66-2-123-4567"
          },
          "email": {
            "type": "string",
            "description": "Company email address",
            "example": "contact@company.com"
          },
          "website": {
            "type": "string",
            "description": "Company website URL",
            "example": "https://www.company.com"
          },
          "logo": {
            "type": "string",
            "description": "Company logo URL",
            "example": "https://example.com/logo.png"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "image": {
            "type": "string",
            "description": "Company image URL",
            "example": "https://example.com/image.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Company cover image URL",
            "example": "https://example.com/cover.jpg"
          }
        },
        "required": [
          "juristicId",
          "nameTh",
          "address",
          "registerdCapital",
          "employeeCount",
          "userId"
        ]
      },
      "ValidationErrorResponseDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP status code",
            "example": 400
          },
          "message": {
            "description": "Array of validation error messages",
            "example": [
              "nameTh should not be empty",
              "juristicId must be a string"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "error": {
            "type": "string",
            "description": "Error description or detailed message",
            "example": "Validation failed"
          },
          "timestamp": {
            "type": "string",
            "description": "Request timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "path": {
            "type": "string",
            "description": "Request path",
            "example": "/api/company"
          }
        },
        "required": [
          "statusCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "UnauthorizedErrorResponseDto": {
        "type": "object",
        "properties": {
          "statusCode": {
            "type": "number",
            "description": "HTTP status code",
            "example": 401
          },
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "Unauthorized"
          },
          "error": {
            "type": "string",
            "description": "Error description or detailed message",
            "example": "Validation failed"
          },
          "timestamp": {
            "type": "string",
            "description": "Request timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "path": {
            "type": "string",
            "description": "Request path",
            "example": "/api/company"
          }
        },
        "required": [
          "statusCode",
          "message",
          "timestamp",
          "path"
        ]
      },
      "UpdateCompanyDto": {
        "type": "object",
        "properties": {
          "juristicId": {
            "type": "string",
            "description": "Company juristic ID",
            "example": "1234567890123"
          },
          "nameTh": {
            "type": "string",
            "description": "Company name in Thai",
            "example": "บริษัท เทคโนโลยี จำกัด"
          },
          "nameEn": {
            "type": "string",
            "description": "Company name in English",
            "example": "Technology Company Limited"
          },
          "description": {
            "type": "string",
            "description": "Company description",
            "example": "A leading technology company specializing in software development"
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "example": "123 Technology Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "registerdCapital": {
            "type": "number",
            "description": "Registered capital amount",
            "example": 1000000
          },
          "employeeCount": {
            "type": "number",
            "description": "Number of employees",
            "example": 50
          },
          "phoneNumber": {
            "type": "string",
            "description": "Company phone number",
            "example": "+66-2-123-4567"
          },
          "email": {
            "type": "string",
            "description": "Company email address",
            "example": "contact@company.com"
          },
          "website": {
            "type": "string",
            "description": "Company website URL",
            "example": "https://www.company.com"
          },
          "logo": {
            "type": "string",
            "description": "Company logo URL",
            "example": "https://example.com/logo.png"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "image": {
            "type": "string",
            "description": "Company image URL",
            "example": "https://example.com/image.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Company cover image URL",
            "example": "https://example.com/cover.jpg"
          }
        }
      },
      "CompanyRevenueDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Revenue record unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "year": {
            "type": "number",
            "description": "Revenue year",
            "example": 2024
          },
          "total": {
            "type": "number",
            "description": "Total revenue amount",
            "example": 5000000
          },
          "companyId": {
            "type": "string",
            "description": "Associated company ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Revenue record creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Revenue record last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "year",
          "total",
          "companyId",
          "createdAt",
          "updatedAt"
        ]
      },
      "CompanyWithRevenueResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Company unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "juristicId": {
            "type": "string",
            "description": "Company juristic ID",
            "example": "1234567890123"
          },
          "nameTh": {
            "type": "string",
            "description": "Company name in Thai",
            "example": "บริษัท เทคโนโลยี จำกัด"
          },
          "nameEn": {
            "type": "string",
            "description": "Company name in English",
            "example": "Technology Company Limited"
          },
          "description": {
            "type": "string",
            "description": "Company description",
            "example": "A leading technology company specializing in software development"
          },
          "description_en": {
            "type": "string",
            "description": "Company description in English",
            "example": "A leading technology company specializing in software development"
          },
          "image": {
            "type": "string",
            "description": "Company logo image URL",
            "example": "https://example.com/logo.png"
          },
          "cover_image": {
            "type": "string",
            "description": "Company cover image URL",
            "example": "https://example.com/cover.jpg"
          },
          "address": {
            "type": "string",
            "description": "Company address",
            "example": "123 Technology Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "registerdCapital": {
            "type": "number",
            "description": "Registered capital amount",
            "example": 1000000
          },
          "employeeCount": {
            "type": "number",
            "description": "Number of employees",
            "example": 50
          },
          "phoneNumber": {
            "type": "string",
            "description": "Company phone number",
            "example": "+66-2-123-4567"
          },
          "email": {
            "type": "string",
            "description": "Company email address",
            "example": "contact@company.com"
          },
          "website": {
            "type": "string",
            "description": "Company website URL",
            "example": "https://www.company.com"
          },
          "logo": {
            "type": "string",
            "description": "Company logo URL",
            "example": "https://example.com/logo.png"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "industries": {
            "description": "Legacy industries array",
            "example": [
              "technology",
              "software"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Company creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Company last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "companyRevenue": {
            "description": "Company revenue records",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CompanyRevenueDto"
            }
          }
        },
        "required": [
          "id",
          "juristicId",
          "nameTh",
          "userId",
          "createdAt",
          "updatedAt",
          "companyRevenue"
        ]
      },
      "CreateRevenueStreamDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateRevenueStreamDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateRevenueValueDto": {
        "type": "object",
        "properties": {}
      },
      "CreateCompanyRevenueDto": {
        "type": "object",
        "properties": {}
      },
      "PaginationMetadata": {
        "type": "object",
        "properties": {
          "page": {
            "type": "number",
            "description": "Current page number (1-based)"
          },
          "limit": {
            "type": "number",
            "description": "Number of items per page"
          },
          "total": {
            "type": "number",
            "description": "Total number of items available"
          },
          "pageCount": {
            "type": "number",
            "description": "Total number of pages"
          },
          "hasNextPage": {
            "type": "boolean",
            "description": "Has next page"
          },
          "hasPreviousPage": {
            "type": "boolean",
            "description": "Has previous page"
          }
        },
        "required": [
          "page",
          "limit",
          "total",
          "pageCount",
          "hasNextPage",
          "hasPreviousPage"
        ]
      },
      "ResponseMetadata": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Data returned from the request"
          },
          "meta": {
            "description": "Pagination information",
            "allOf": [
              {
                "$ref": "#/components/schemas/PaginationMetadata"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Request success status",
            "default": true
          },
          "message": {
            "type": "string",
            "description": "Optional message"
          }
        },
        "required": [
          "data",
          "meta",
          "success"
        ]
      },
      "StandardDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "image": {
            "type": "string"
          }
        },
        "required": [
          "name"
        ]
      },
      "ImageDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "url"
        ]
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "industriesRelated": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "industryChannels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "industrySkills": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "industryTags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "CompanyDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        },
        "required": [
          "id"
        ]
      },
      "FreelanceDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/UserDto"
          }
        },
        "required": [
          "id"
        ]
      },
      "PortfolioByIndustryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "industryTypeSlug": {
            "type": "string"
          },
          "link": {
            "type": "string"
          },
          "freelanceId": {
            "type": "string"
          },
          "companyId": {
            "type": "string"
          },
          "companyJuristicId": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "looking_for": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "standards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StandardDto"
            }
          },
          "Image": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImageDto"
            }
          },
          "company": {
            "$ref": "#/components/schemas/CompanyDto"
          },
          "freelance": {
            "$ref": "#/components/schemas/FreelanceDto"
          }
        },
        "required": [
          "id",
          "title",
          "industryTypeSlug"
        ]
      },
      "CreatePortfolioWithImagesAndStandardsDto": {
        "type": "object",
        "properties": {}
      },
      "FavoritePortfolioDto": {
        "type": "object",
        "properties": {}
      },
      "CreateCommentDto": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The content of the comment"
          },
          "portfolioId": {
            "type": "string",
            "description": "The ID of the portfolio being commented on"
          },
          "parentId": {
            "type": "string",
            "description": "The ID of the parent comment (for replies)"
          }
        },
        "required": [
          "content",
          "portfolioId"
        ]
      },
      "UpdatePortfolioDto": {
        "type": "object",
        "properties": {}
      },
      "UploadFileResponseDto": {
        "type": "object",
        "properties": {
          "path": {
            "type": "string",
            "description": "Relative path of the uploaded file",
            "example": "portfolio/image-1642531200000.jpg"
          },
          "fullPath": {
            "type": "string",
            "description": "Full path of the uploaded file",
            "example": "portfolio/image-1642531200000.jpg"
          },
          "publicUrl": {
            "type": "string",
            "description": "Public URL to access the uploaded file",
            "example": "https://digitalcontent.depa.or.th/uploads/portfolio/image-1642531200000.jpg"
          },
          "size": {
            "type": "number",
            "description": "File size in bytes",
            "example": 1024576
          },
          "mimetype": {
            "type": "string",
            "description": "MIME type of the uploaded file",
            "example": "image/jpeg"
          }
        },
        "required": [
          "path",
          "fullPath",
          "publicUrl",
          "size",
          "mimetype"
        ]
      },
      "SingleUploadResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Uploaded file information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UploadFileResponseDto"
              }
            ]
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "File uploaded successfully"
          }
        },
        "required": [
          "data",
          "success",
          "message"
        ]
      },
      "MultipleUploadResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of uploaded file information",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UploadFileResponseDto"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Files uploaded successfully"
          }
        },
        "required": [
          "data",
          "success",
          "message"
        ]
      },
      "CreateIndustryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Industry name",
            "example": "Game Development"
          },
          "slug": {
            "type": "string",
            "description": "Industry slug (URL friendly identifier)",
            "example": "game-development"
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "IndustryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Industry unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Industry name",
            "example": "Game Development"
          },
          "slug": {
            "type": "string",
            "description": "Industry slug (URL friendly identifier)",
            "example": "game-development"
          },
          "description": {
            "type": "string",
            "description": "Industry description",
            "example": "Comprehensive game development services"
          },
          "image": {
            "type": "string",
            "description": "Industry image URL",
            "example": "https://example.com/industry-image.jpg"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-05-11T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-05-11T10:30:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "createdAt",
          "updatedAt"
        ]
      },
      "CategoryResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the category",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the category",
            "example": "Mobile Games"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the category",
            "example": "mobile-games"
          },
          "description": {
            "type": "string",
            "description": "Description of the category",
            "example": "Games designed for mobile platforms"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the category",
            "example": "https://example.com/mobile-games.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this category belongs to",
            "example": "game"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "createdAt",
          "updatedAt"
        ]
      },
      "IndustryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Industry name"
          },
          "slug": {
            "type": "string",
            "description": "Industry slug identifier"
          }
        },
        "required": [
          "name",
          "slug"
        ]
      },
      "ChannelResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Channel name"
          },
          "slug": {
            "type": "string",
            "description": "Channel slug identifier"
          },
          "industrySlug": {
            "type": "string",
            "description": "Associated industry slug"
          },
          "industry": {
            "description": "Associated industry data",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "industry",
          "createdAt",
          "updatedAt"
        ]
      },
      "SourceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the source",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the source",
            "example": "Steam"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the source",
            "example": "steam"
          },
          "description": {
            "type": "string",
            "description": "Description of the source",
            "example": "Digital distribution platform for games"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the source",
            "example": "https://example.com/steam.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this source belongs to",
            "example": "game"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "createdAt",
          "updatedAt"
        ]
      },
      "SegmentResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier of the segment",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Name of the segment",
            "example": "Casual Gamers"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the segment",
            "example": "casual-gamers"
          },
          "description": {
            "type": "string",
            "description": "Description of the segment",
            "example": "Games for casual gaming audience"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the segment",
            "example": "https://example.com/casual-gamers.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this segment belongs to",
            "example": "game"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2024-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "createdAt",
          "updatedAt"
        ]
      },
      "SkillResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "title": {
            "type": "string",
            "description": "Skill title"
          },
          "slug": {
            "type": "string",
            "description": "Skill slug identifier"
          },
          "group": {
            "type": "string",
            "description": "Optional skill group"
          },
          "industrySlug": {
            "type": "string",
            "description": "Associated industry slug"
          },
          "industry": {
            "description": "Associated industry data",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "title",
          "slug",
          "industrySlug",
          "industry",
          "createdAt",
          "updatedAt"
        ]
      },
      "TagResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "name": {
            "type": "string",
            "description": "Tag name"
          },
          "slug": {
            "type": "string",
            "description": "Tag slug identifier"
          },
          "industrySlug": {
            "type": "string",
            "description": "Associated industry slug"
          },
          "industry": {
            "description": "Associated industry data",
            "allOf": [
              {
                "$ref": "#/components/schemas/IndustryDto"
              }
            ]
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "industry",
          "createdAt",
          "updatedAt"
        ]
      },
      "LookingForResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Looking for unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Looking for name",
            "example": "Game Developer"
          },
          "slug": {
            "type": "string",
            "description": "Looking for slug",
            "example": "game-developer"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this looking for belongs to",
            "example": "technology"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "createdAt",
          "updatedAt"
        ]
      },
      "IndustryWithRelationsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Industry unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Industry name",
            "example": "Game Development"
          },
          "slug": {
            "type": "string",
            "description": "Industry slug (URL friendly identifier)",
            "example": "game-development"
          },
          "description": {
            "type": "string",
            "description": "Industry description",
            "example": "Comprehensive game development services"
          },
          "image": {
            "type": "string",
            "description": "Industry image URL",
            "example": "https://example.com/industry-image.jpg"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2025-05-11T10:30:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2025-05-11T10:30:00Z"
          },
          "Category": {
            "description": "Associated categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponseDto"
            }
          },
          "Channel": {
            "description": "Associated channels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelResponseDto"
            }
          },
          "Source": {
            "description": "Associated sources",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceResponseDto"
            }
          },
          "Segment": {
            "description": "Associated segments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentResponseDto"
            }
          },
          "Skill": {
            "description": "Associated skills",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkillResponseDto"
            }
          },
          "Tag": {
            "description": "Associated tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponseDto"
            }
          },
          "LookingFor": {
            "description": "Associated looking for items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LookingForResponseDto"
            }
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "createdAt",
          "updatedAt"
        ]
      },
      "IndustryListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of industries",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IndustryWithRelationsResponseDto"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Industries retrieved successfully"
          }
        },
        "required": [
          "data",
          "success"
        ]
      },
      "UpdateIndustryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Updated industry name",
            "example": "Game Development & Design"
          },
          "slug": {
            "type": "string",
            "description": "Updated industry slug",
            "example": "game-dev-design"
          }
        }
      },
      "CreateSkillDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Skill title",
            "example": "Game Design"
          },
          "slug": {
            "type": "string",
            "description": "Skill slug identifier (URL-friendly)",
            "example": "game-design"
          },
          "group": {
            "type": "string",
            "description": "Optional skill group for categorization",
            "example": "Design"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this skill belongs to",
            "example": "game"
          }
        },
        "required": [
          "title",
          "slug",
          "industrySlug"
        ]
      },
      "SkillListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of skills",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SkillResponseDto"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Skills retrieved successfully"
          }
        },
        "required": [
          "data",
          "success"
        ]
      },
      "UpdateSkillDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated skill title",
            "example": "Advanced Game Design"
          },
          "group": {
            "type": "string",
            "description": "Updated skill group",
            "example": "Design"
          },
          "newSlug": {
            "type": "string",
            "description": "New slug for the skill (if you want to change it)",
            "example": "advanced-game-design"
          }
        }
      },
      "CreateTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Tag name",
            "example": "Mobile Gaming"
          },
          "slug": {
            "type": "string",
            "description": "Tag slug identifier (URL-friendly)",
            "example": "mobile-gaming"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this tag belongs to",
            "example": "game"
          }
        },
        "required": [
          "name",
          "slug",
          "industrySlug"
        ]
      },
      "TagListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of tags",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TagResponseDto"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Tags retrieved successfully"
          }
        },
        "required": [
          "data",
          "success"
        ]
      },
      "UpdateTagDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Updated tag title",
            "example": "Advanced Mobile Gaming"
          },
          "newSlug": {
            "type": "string",
            "description": "New slug for the tag (if you want to change it)",
            "example": "advanced-mobile-gaming"
          }
        }
      },
      "CreateChannelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "industrySlug": {
            "type": "string"
          }
        },
        "required": [
          "name",
          "slug",
          "industrySlug"
        ]
      },
      "ChannelListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of channels",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ChannelResponseDto"
            }
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Channels retrieved successfully"
          }
        },
        "required": [
          "data",
          "success"
        ]
      },
      "UpdateChannelDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "slug": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "industrySlug": {
            "type": "string"
          }
        }
      },
      "CreateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category",
            "example": "Mobile Games"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the category",
            "example": "mobile-games"
          },
          "description": {
            "type": "string",
            "description": "Description of the category",
            "example": "Games designed for mobile platforms"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the category",
            "example": "https://example.com/mobile-games.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this category belongs to",
            "example": "game"
          }
        },
        "required": [
          "name",
          "slug",
          "industrySlug"
        ]
      },
      "CategoryListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of categories",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CategoryResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of categories",
            "example": 25
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "UpdateCategoryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the category",
            "example": "Mobile Games"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the category",
            "example": "mobile-games"
          },
          "description": {
            "type": "string",
            "description": "Description of the category",
            "example": "Games designed for mobile platforms"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the category",
            "example": "https://example.com/mobile-games.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this category belongs to",
            "example": "game"
          }
        }
      },
      "CreateSourceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the source",
            "example": "Steam"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the source",
            "example": "steam"
          },
          "description": {
            "type": "string",
            "description": "Description of the source",
            "example": "Digital distribution platform for games"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the source",
            "example": "https://example.com/steam.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this source belongs to",
            "example": "game"
          }
        },
        "required": [
          "name",
          "slug",
          "industrySlug"
        ]
      },
      "SourceListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of sources",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SourceResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of sources",
            "example": 25
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "UpdateSourceDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the source",
            "example": "Steam"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the source",
            "example": "steam"
          },
          "description": {
            "type": "string",
            "description": "Description of the source",
            "example": "Digital distribution platform for games"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the source",
            "example": "https://example.com/steam.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this source belongs to",
            "example": "game"
          }
        }
      },
      "CreateSegmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the segment",
            "example": "Casual Gamers"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the segment",
            "example": "casual-gamers"
          },
          "description": {
            "type": "string",
            "description": "Description of the segment",
            "example": "Games for casual gaming audience"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the segment",
            "example": "https://example.com/casual-gamers.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this segment belongs to",
            "example": "game"
          }
        },
        "required": [
          "name",
          "slug",
          "industrySlug"
        ]
      },
      "SegmentListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "List of segments",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SegmentResponseDto"
            }
          },
          "total": {
            "type": "number",
            "description": "Total number of segments",
            "example": 25
          }
        },
        "required": [
          "data",
          "total"
        ]
      },
      "UpdateSegmentDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the segment",
            "example": "Casual Gamers"
          },
          "slug": {
            "type": "string",
            "description": "Unique slug identifier for the segment",
            "example": "casual-gamers"
          },
          "description": {
            "type": "string",
            "description": "Description of the segment",
            "example": "Games for casual gaming audience"
          },
          "image": {
            "type": "string",
            "description": "Image URL for the segment",
            "example": "https://example.com/casual-gamers.jpg"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug this segment belongs to",
            "example": "game"
          }
        }
      },
      "CreateProjectTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project tag name",
            "example": "Gaming"
          },
          "slug": {
            "type": "string",
            "description": "Project tag slug (optional, will be auto-generated if not provided)",
            "example": "gaming"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this project tag belongs to",
            "example": "technology"
          }
        },
        "required": [
          "name",
          "industrySlug"
        ]
      },
      "ProjectTagResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Project tag unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Project tag name",
            "example": "Gaming"
          },
          "slug": {
            "type": "string",
            "description": "Project tag slug",
            "example": "gaming"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this project tag belongs to",
            "example": "technology"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "slug",
          "industrySlug",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateProjectTagDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Project tag name",
            "example": "Gaming"
          },
          "slug": {
            "type": "string",
            "description": "Project tag slug (optional, will be auto-generated if not provided)",
            "example": "gaming"
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this project tag belongs to",
            "example": "technology"
          }
        }
      },
      "CreateStandardsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Standards name",
            "example": "ESRB Mature"
          },
          "description": {
            "type": "string",
            "description": "Standards description",
            "example": "Entertainment Software Rating Board - Mature 17+"
          },
          "type": {
            "type": "string",
            "description": "Standards type",
            "example": "ESRB",
            "enum": [
              "ERSB",
              "PEGI",
              "CERO",
              "USK",
              "ACB",
              "IARC",
              "GRAC",
              "VSC",
              "OFLC",
              "BBFC",
              "FPB",
              "RARS",
              "GSRB",
              "GSRR",
              "MPA",
              "EIRIN",
              "NBTC",
              "ESRB"
            ]
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this standards belongs to",
            "example": "technology"
          },
          "image": {
            "type": "string",
            "description": "Standards image URL",
            "example": "https://example.com/esrb-mature.png"
          }
        },
        "required": [
          "name",
          "type",
          "industrySlug"
        ]
      },
      "StandardsResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Standards unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Standards name",
            "example": "ESRB Mature"
          },
          "description": {
            "type": "string",
            "description": "Standards description",
            "example": "Entertainment Software Rating Board - Mature 17+"
          },
          "type": {
            "type": "string",
            "description": "Standards type",
            "example": "ESRB",
            "enum": [
              "ERSB",
              "PEGI",
              "CERO",
              "USK",
              "ACB",
              "IARC",
              "GRAC",
              "VSC",
              "OFLC",
              "BBFC",
              "FPB",
              "RARS",
              "GSRB",
              "GSRR",
              "MPA",
              "EIRIN",
              "NBTC",
              "ESRB"
            ]
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this standards belongs to",
            "example": "technology"
          },
          "image": {
            "type": "string",
            "description": "Standards image URL",
            "example": "https://example.com/esrb-mature.png"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Created timestamp",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Updated timestamp",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "required": [
          "id",
          "name",
          "type",
          "industrySlug",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateStandardsDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Standards name",
            "example": "ESRB Mature"
          },
          "description": {
            "type": "string",
            "description": "Standards description",
            "example": "Entertainment Software Rating Board - Mature 17+"
          },
          "type": {
            "type": "string",
            "description": "Standards type",
            "example": "ESRB",
            "enum": [
              "ERSB",
              "PEGI",
              "CERO",
              "USK",
              "ACB",
              "IARC",
              "GRAC",
              "VSC",
              "OFLC",
              "BBFC",
              "FPB",
              "RARS",
              "GSRB",
              "GSRR",
              "MPA",
              "EIRIN",
              "NBTC",
              "ESRB"
            ]
          },
          "industrySlug": {
            "type": "string",
            "description": "Industry slug that this standards belongs to",
            "example": "technology"
          },
          "image": {
            "type": "string",
            "description": "Standards image URL",
            "example": "https://example.com/esrb-mature.png"
          }
        }
      },
      "CreateLookingForDto": {
        "type": "object",
        "properties": {}
      },
      "UpdateLookingForDto": {
        "type": "object",
        "properties": {}
      },
      "PortfolioImageDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "Image URL",
            "example": "https://example.com/portfolio/image1.jpg"
          },
          "type": {
            "type": "string",
            "description": "Image type",
            "example": "MAIN"
          },
          "description": {
            "type": "string",
            "description": "Image description",
            "example": "Project screenshot"
          }
        },
        "required": [
          "url",
          "type"
        ]
      },
      "PortfolioDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Portfolio unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "title": {
            "type": "string",
            "description": "Portfolio title",
            "example": "Web Development Project"
          },
          "description": {
            "type": "string",
            "description": "Portfolio description",
            "example": "A complete e-commerce website built with React and Node.js"
          },
          "Image": {
            "description": "Portfolio images",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioImageDto"
            }
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "FreelanceWithPortfolioResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Freelance unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "juristicId": {
            "type": "string",
            "description": "Freelance juristic ID",
            "example": "1234567890123"
          },
          "firstNameTh": {
            "type": "string",
            "description": "First name in Thai",
            "example": "สมชาย"
          },
          "lastNameTh": {
            "type": "string",
            "description": "Last name in Thai",
            "example": "ใจดี"
          },
          "firstNameEn": {
            "type": "string",
            "description": "First name in English",
            "example": "John"
          },
          "lastNameEn": {
            "type": "string",
            "description": "Last name in English",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "freelancer@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+66-123-456-789"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "123 Freelancer Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "image": {
            "type": "string",
            "description": "Profile image URL",
            "example": "https://example.com/profile.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/cover.jpg"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "industryTypes": {
            "description": "Industry types array",
            "example": [
              "technology",
              "design"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Freelance creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Freelance last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "user": {
            "description": "Associated user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponseDto"
              }
            ]
          },
          "Portfolio": {
            "description": "Portfolio items",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PortfolioDto"
            }
          }
        },
        "required": [
          "id",
          "firstNameTh",
          "lastNameTh",
          "email",
          "userId",
          "createdAt",
          "updatedAt",
          "user"
        ]
      },
      "FreelanceListResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "description": "Array of freelances with pagination",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FreelanceWithPortfolioResponseDto"
            }
          },
          "meta": {
            "type": "object",
            "description": "Pagination metadata",
            "properties": {
              "total": {
                "type": "number",
                "example": 100
              },
              "page": {
                "type": "number",
                "example": 1
              },
              "limit": {
                "type": "number",
                "example": 10
              },
              "totalPages": {
                "type": "number",
                "example": 10
              },
              "hasNext": {
                "type": "boolean",
                "example": true
              },
              "hasPrevious": {
                "type": "boolean",
                "example": false
              }
            },
            "additionalProperties": false
          },
          "success": {
            "type": "boolean",
            "description": "Success status",
            "example": true
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "Freelances retrieved successfully"
          }
        },
        "required": [
          "data",
          "meta",
          "success"
        ]
      },
      "FreelanceWithUserResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Freelance unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "juristicId": {
            "type": "string",
            "description": "Freelance juristic ID",
            "example": "1234567890123"
          },
          "firstNameTh": {
            "type": "string",
            "description": "First name in Thai",
            "example": "สมชาย"
          },
          "lastNameTh": {
            "type": "string",
            "description": "Last name in Thai",
            "example": "ใจดี"
          },
          "firstNameEn": {
            "type": "string",
            "description": "First name in English",
            "example": "John"
          },
          "lastNameEn": {
            "type": "string",
            "description": "Last name in English",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "freelancer@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+66-123-456-789"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "123 Freelancer Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "image": {
            "type": "string",
            "description": "Profile image URL",
            "example": "https://example.com/profile.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/cover.jpg"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "industryTypes": {
            "description": "Industry types array",
            "example": [
              "technology",
              "design"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Freelance creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Freelance last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "user": {
            "description": "Associated user information",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserResponseDto"
              }
            ]
          }
        },
        "required": [
          "id",
          "firstNameTh",
          "lastNameTh",
          "email",
          "userId",
          "createdAt",
          "updatedAt",
          "user"
        ]
      },
      "CreateFreelanceDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID associated with this freelance",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstNameTh": {
            "type": "string",
            "description": "First name in Thai",
            "example": "สมชาย"
          },
          "lastNameTh": {
            "type": "string",
            "description": "Last name in Thai",
            "example": "ใจดี"
          },
          "firstNameEn": {
            "type": "string",
            "description": "First name in English",
            "example": "John"
          },
          "lastNameEn": {
            "type": "string",
            "description": "Last name in English",
            "example": "Doe"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "123 Main Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district/Tambon",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District/Amphoe",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province/Changwat",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+66-123-456-789"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "john.doe@example.com"
          },
          "juristicId": {
            "type": "string",
            "description": "Juristic ID (if applicable)",
            "example": "1234567890123"
          },
          "industryTypes": {
            "description": "Types of industries the freelancer works in",
            "example": [
              "game",
              "animation"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "image": {
            "type": "string",
            "description": "Profile image URL",
            "example": "https://example.com/profile.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/cover.jpg"
          }
        },
        "required": [
          "userId",
          "firstNameTh",
          "lastNameTh",
          "email"
        ]
      },
      "FreelanceResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Freelance unique identifier",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "juristicId": {
            "type": "string",
            "description": "Freelance juristic ID",
            "example": "1234567890123"
          },
          "firstNameTh": {
            "type": "string",
            "description": "First name in Thai",
            "example": "สมชาย"
          },
          "lastNameTh": {
            "type": "string",
            "description": "Last name in Thai",
            "example": "ใจดี"
          },
          "firstNameEn": {
            "type": "string",
            "description": "First name in English",
            "example": "John"
          },
          "lastNameEn": {
            "type": "string",
            "description": "Last name in English",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "freelancer@example.com"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+66-123-456-789"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "123 Freelancer Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "image": {
            "type": "string",
            "description": "Profile image URL",
            "example": "https://example.com/profile.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/cover.jpg"
          },
          "userId": {
            "type": "string",
            "description": "Associated user ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "industryTypes": {
            "description": "Industry types array",
            "example": [
              "technology",
              "design"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Freelance creation timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Freelance last update timestamp",
            "example": "2025-01-01T00:00:00.000Z"
          }
        },
        "required": [
          "id",
          "firstNameTh",
          "lastNameTh",
          "email",
          "userId",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateFreelanceDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "description": "User ID associated with this freelance",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "firstNameTh": {
            "type": "string",
            "description": "First name in Thai",
            "example": "สมชาย"
          },
          "lastNameTh": {
            "type": "string",
            "description": "Last name in Thai",
            "example": "ใจดี"
          },
          "firstNameEn": {
            "type": "string",
            "description": "First name in English",
            "example": "John"
          },
          "lastNameEn": {
            "type": "string",
            "description": "Last name in English",
            "example": "Doe"
          },
          "address": {
            "type": "string",
            "description": "Address",
            "example": "123 Main Street"
          },
          "subDistrict": {
            "type": "string",
            "description": "Sub-district/Tambon",
            "example": "Silom"
          },
          "district": {
            "type": "string",
            "description": "District/Amphoe",
            "example": "Bang Rak"
          },
          "province": {
            "type": "string",
            "description": "Province/Changwat",
            "example": "Bangkok"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal code",
            "example": "10500"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Contact phone number",
            "example": "+66-123-456-789"
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "john.doe@example.com"
          },
          "juristicId": {
            "type": "string",
            "description": "Juristic ID (if applicable)",
            "example": "1234567890123"
          },
          "industryTypes": {
            "description": "Types of industries the freelancer works in",
            "example": [
              "game",
              "animation"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "image": {
            "type": "string",
            "description": "Profile image URL",
            "example": "https://example.com/profile.jpg"
          },
          "cover_image": {
            "type": "string",
            "description": "Cover image URL",
            "example": "https://example.com/cover.jpg"
          }
        }
      },
      "TechhuntLoginDto": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username or email address",
            "example": "mathuros@playpark.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "TH@digital"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "AdminSignupDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Admin email address",
            "example": "admin@depa.go.th"
          },
          "username": {
            "type": "string",
            "description": "Admin username",
            "example": "admin_user"
          },
          "password": {
            "type": "string",
            "description": "Admin password",
            "example": "SecurePassword123!"
          }
        },
        "required": [
          "email",
          "username",
          "password"
        ]
      },
      "AdminSigninDto": {
        "type": "object",
        "properties": {
          "emailOrUsername": {
            "type": "string",
            "description": "Admin email or username",
            "example": "admin@depa.go.th"
          },
          "password": {
            "type": "string",
            "description": "Admin password",
            "example": "SecurePassword123!"
          }
        },
        "required": [
          "emailOrUsername",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "abc123..."
          }
        },
        "required": [
          "refreshToken"
        ]
      }
    }
  }
}