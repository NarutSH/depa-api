import {
  Body,
  Controller,
  ForbiddenException,
  Get,
  Param,
  Patch,
  Post,
  Query,
  Req,
} from '@nestjs/common';
import CreateUserDto from './dtos/create-user.dto';
import UpdateUserDto from './dtos/update-user.dto';
import { UsersService } from './users.service';
// Removed imports to deleted files
import {
  ApiBearerAuth,
  ApiBody,
  ApiOperation,
  ApiParam,
  ApiQuery,
  ApiResponse,
  ApiTags,
} from '@nestjs/swagger';
import { Request } from 'express';
import { Role } from '../auth/roles.enum';
import { QueryMetadataDto } from 'src/utils';
  // @UseGuards(JwtAuthGuard, RolesGuard)
  @ApiOperation({
    summary: 'Update user profile',
    description:
      'Updates a user profile by ID. Users can only update their own profile unless they are admin.',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'User unique identifier',
    example: 'clxyz123456789',
  })
  @ApiBody({
    type: UpdateUserDto,
    description: 'User update data with optional profile fields and industry associations',
  })
  @ApiResponse({
    status: 200,
    description: 'User updated successfully',
    schema: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          example: 'clxyz123456789',
        },
        createdAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        updatedAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        fullnameTh: {
          type: 'string',
          example: 'สมชาย ใจดี',
        },
        fullnameEn: {
          type: 'string',
          example: 'John Smith',
        },
        email: {
          type: 'string',
          example: 'john.smith@example.com',
        },
        about: {
          type: 'string',
          example: 'Experienced software developer',
        },
        phoneNumber: {
          type: 'string',
          example: '+66812345678',
        },
        website: {
          type: 'string',
          example: 'https://johnsmith.dev',
        },
        location: {
          type: 'string',
          example: 'Bangkok, Thailand',
        },
        image: {
          type: 'string',
          example: 'https://example.com/images/profile.jpg',
        },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Bad request - invalid input data or validation errors',
  })
  @ApiResponse({
    status: 401,
    description: 'Unauthorized - requires authentication',
  })
  @ApiResponse({
    status: 403,
    description: "Forbidden - cannot update other users' profiles",
  })
  @ApiResponse({
    status: 404,
    description: 'User not found',
  })

@ApiTags('Users')
@ApiBearerAuth()
@Controller('users')
export class UsersController {
  constructor(private readonly usersService: UsersService) {}

  // Only admin can list all users
  @Get()
  // @UseGuards(JwtAuthGuard, RolesGuard)
  @ApiOperation({
    summary: 'Get all users',
    description:
      'Retrieves a paginated list of all users with industry relations and filtering support. Admin only.',
  })
  @ApiResponse({
    status: 200,
    description: 'List of all users retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        data: {
          type: 'array',
          items: {
            $ref: '#/components/schemas/UserWithIndustryRelationsResponse',
          },
        },
        total: {
          type: 'number',
          example: 100,
        },
        page: {
          type: 'number',
          example: 1,
        },
        limit: {
          type: 'number',
          example: 10,
        },
        totalPages: {
          type: 'number',
          example: 10,
        },
        hasNext: {
          type: 'boolean',
          example: true,
        },
        hasPrev: {
          type: 'boolean',
          example: false,
        },
      },
    },
  })
  @ApiResponse({
    status: 403,
    description: 'Forbidden - requires admin role',
  })
  @ApiResponse({
    status: 400,
    description: 'Bad Request - Invalid query parameters',
  })
  @ApiQuery({
    name: 'page',
    required: false,
    type: Number,
    description: 'Page number for pagination (default: 1)',
    example: 1,
  })
  @ApiQuery({
    name: 'limit',
    required: false,
    type: Number,
    description: 'Number of items per page (default: 10, max: 100)',
    example: 10,
  })
  @ApiQuery({
    name: 'search',
    required: false,
    type: String,
    description: 'Search term for user name, email, or about fields',
    example: 'software developer',
  })
  @ApiQuery({
    name: 'sortBy',
    required: false,
    type: String,
    description:
      'Sort field (createdAt, updatedAt, fullnameTh, fullnameEn, email)',
    example: 'createdAt',
  })
  @ApiQuery({
    name: 'sortOrder',
    required: false,
    type: String,
    description: 'Sort order (asc/desc)',
    example: 'desc',
  })
  async getAllUsers(@Query() query: QueryMetadataDto) {
    return this.usersService.getAllUsers(query);
  }

  // Get current user profile
  @Get('me')
  // @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: 'Get current user profile',
    description:
      'Retrieves the profile of the currently authenticated user with transformed data structure.',
  })
  @ApiResponse({
    status: 200,
    description: 'Current user profile retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          example: 'clxyz123456789',
        },
        createdAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        updatedAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        fullnameTh: {
          type: 'string',
          example: 'สมชาย ใจดี',
        },
        fullnameEn: {
          type: 'string',
          example: 'John Smith',
        },
        email: {
          type: 'string',
          example: 'john.smith@example.com',
        },
        about: {
          type: 'string',
          example: 'Experienced software developer',
        },
        phoneNumber: {
          type: 'string',
          example: '+66812345678',
        },
        website: {
          type: 'string',
          example: 'https://johnsmith.dev',
        },
        location: {
          type: 'string',
          example: 'Bangkok, Thailand',
        },
        image: {
          type: 'string',
          example: 'https://example.com/images/profile.jpg',
        },
        tags: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              category: {
                type: 'string',
                example: 'skill',
              },
              name: {
                type: 'string',
                example: 'JavaScript',
              },
            },
          },
        },
        channels: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              category: {
                type: 'string',
                example: 'email',
              },
              name: {
                type: 'string',
                example: 'support@example.com',
              },
            },
          },
        },
        specialists: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              category: {
                type: 'string',
                example: 'programming',
              },
              name: {
                type: 'string',
                example: 'Backend Development',
              },
            },
          },
        },
        industries: {
          type: 'array',
          items: {
            type: 'string',
          },
          example: ['information-technology', 'digital-marketing'],
        },
      },
    },
  })
  @ApiResponse({
    status: 401,
    description: 'Unauthorized - requires authentication',
  })
  @ApiResponse({
    status: 403,
    description: 'Forbidden - User ID not found in request',
  })
  async getMe(@Req() req: Request) {
    console.log('req==>', req);
    const user = req.user as any;

    if (!user?.id) {
      throw new ForbiddenException('User ID not found in request');
    }

    return this.usersService.getMe(user.id);
  }

  // User profile access - restricted by role
  @Get(':id')
  // @UseGuards(JwtAuthGuard, RolesGuard)
  @ApiOperation({
    summary: 'Get user by ID',
    description:
      'Retrieves user by ID with detailed relations. Users can only access their own profile unless they are admin.',
  })
  @ApiParam({
    name: 'id',
    type: String,
    description: 'User unique identifier',
    example: 'clxyz123456789',
  })
  @ApiResponse({
    status: 200,
    description: 'User retrieved successfully',
    schema: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          example: 'clxyz123456789',
        },
        createdAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        updatedAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        fullnameTh: {
          type: 'string',
          example: 'สมชาย ใจดี',
        },
        fullnameEn: {
          type: 'string',
          example: 'John Smith',
        },
        email: {
          type: 'string',
          example: 'john.smith@example.com',
        },
        about: {
          type: 'string',
          example: 'Experienced software developer',
        },
        phoneNumber: {
          type: 'string',
          example: '+66812345678',
        },
        website: {
          type: 'string',
          example: 'https://johnsmith.dev',
        },
        location: {
          type: 'string',
          example: 'Bangkok, Thailand',
        },
        image: {
          type: 'string',
          example: 'https://example.com/images/profile.jpg',
        },
        industries: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
                example: 'clxyz123456789',
              },
              name: {
                type: 'string',
                example: 'information-technology',
              },
              displayNameTh: {
                type: 'string',
                example: 'เทคโนโลยีสารสนเทศ',
              },
              displayNameEn: {
                type: 'string',
                example: 'Information Technology',
              },
            },
          },
        },
        tags: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
                example: 'clxyz123456789',
              },
              name: {
                type: 'string',
                example: 'JavaScript',
              },
              displayNameTh: {
                type: 'string',
                example: 'จาวาสคริปต์',
              },
              displayNameEn: {
                type: 'string',
                example: 'JavaScript',
              },
            },
          },
        },
        channels: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
                example: 'clxyz123456789',
              },
              name: {
                type: 'string',
                example: 'email',
              },
              displayNameTh: {
                type: 'string',
                example: 'อีเมล',
              },
              displayNameEn: {
                type: 'string',
                example: 'Email',
              },
            },
          },
        },
        specialists: {
          type: 'array',
          items: {
            type: 'object',
            properties: {
              id: {
                type: 'string',
                example: 'clxyz123456789',
              },
              name: {
                type: 'string',
                example: 'Backend Development',
              },
              displayNameTh: {
                type: 'string',
                example: 'การพัฒนาฝั่งเซิร์ฟเวอร์',
              },
              displayNameEn: {
                type: 'string',
                example: 'Backend Development',
              },
            },
          },
        },
      },
    },
  })
  @ApiResponse({
    status: 401,
    description: 'Unauthorized - requires authentication',
  })
  @ApiResponse({
    status: 403,
    description: "Forbidden - cannot access other users' profiles",
  })
  @ApiResponse({
    status: 404,
    description: 'User not found',
  })
  async getUserById(@Param('id') id: string, @Req() req: Request) {
    const user = req.user as any;

    // Admin can access any profile
    if (user.userType === Role.ADMIN) {
      return this.usersService.getUserById(id);
    }

    // Users can only access their own profile
    if (user.id === id) {
      return this.usersService.getUserById(id);
    }

    throw new ForbiddenException('You can only access your own profile');
  }

  // Allow email lookup for all authenticated users
  @Get('email/:email')
  // @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: 'Get user by email',
    description: 'Retrieves user by email for any authenticated user.',
  })
  @ApiParam({ name: 'email', description: 'User email address' })
  @ApiResponse({ status: 200, description: 'User retrieved successfully' })
  @ApiResponse({
    status: 401,
    description: 'Unauthorized - requires authentication',
  })
  @ApiResponse({ status: 404, description: 'User not found' })
  async getUserByEmail(@Param('email') email: string) {
    return this.usersService.getUserByEmail(email);
  }

  // Allow users to create their own profile
  @Post()
  // @UseGuards(JwtAuthGuard)
  @ApiOperation({
    summary: 'Create user profile',
    description:
      'Creates a new user profile for authenticated users with industry associations.',
  })
  @ApiBody({
    type: CreateUserDto,
    description:
      'User creation data with profile information and industry associations',
  })
  @ApiResponse({
    status: 201,
    description: 'User profile created successfully',
    schema: {
      type: 'object',
      properties: {
        id: {
          type: 'string',
          example: 'clxyz123456789',
        },
        createdAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        updatedAt: {
          type: 'string',
          format: 'date-time',
          example: '2024-01-01T00:00:00.000Z',
        },
        fullnameTh: {
          type: 'string',
          example: 'สมชาย ใจดี',
        },
        fullnameEn: {
          type: 'string',
          example: 'John Smith',
        },
        email: {
          type: 'string',
          example: 'john.smith@example.com',
        },
        about: {
          type: 'string',
          example: 'Experienced software developer',
        },
        phoneNumber: {
          type: 'string',
          example: '+66812345678',
        },
        website: {
          type: 'string',
          example: 'https://johnsmith.dev',
        },
        location: {
          type: 'string',
          example: 'Bangkok, Thailand',
        },
        image: {
          type: 'string',
          example: 'https://example.com/images/profile.jpg',
        },
      },
    },
  })
  @ApiResponse({
    status: 400,
    description: 'Bad request - invalid input data or validation errors',
  })
  @ApiResponse({
    status: 401,
    description: 'Unauthorized - requires authentication',
  })
  @ApiResponse({
    status: 403,
    description: 'Forbidden - can only create profile with own email',
  })
  @ApiResponse({
    status: 409,
    description: 'Conflict - user profile already exists',
  })
  async createUser(@Body() body: CreateUserDto, @Req() req: Request) {
    const user = req.user as any;

    // Ensure the email in the profile matches the authenticated user
    if (user.email !== body.email) {
      throw new ForbiddenException(
        'You can only create a profile with your own email',
      );
    }

    return this.usersService.createUser(body);
  }

  // Update user profile - restricted by role
  @Patch(':id')
  // @UseGuards(JwtAuthGuard, RolesGuard)
  @ApiOperation({
    summary: 'Update user',
    description:
      'Updates a user by ID. Users can only update their own profile.',
  })
  @ApiParam({ name: 'id', description: 'User ID' })
  @ApiBody({ type: UpdateUserDto })
  @ApiResponse({ status: 200, description: 'User updated successfully' })
  @ApiResponse({
    status: 403,
    description: "Forbidden - cannot update other users's profiles",
  })
  @ApiResponse({ status: 404, description: 'User not found' })
  async updateUser(
    @Param('id') id: string,
    @Body() body: UpdateUserDto,
    // @Req() req: Request,
  ) {
    try {
      return this.usersService.updateUser(id, body);
    } catch (error) {
      console.error('Error updating user:', error);
      throw new ForbiddenException('Failed to update user');
    }
  }

  // Update by email - admin only
  @Patch('email/:email')
  // @UseGuards(JwtAuthGuard, RolesGuard)
  // @Roles(Role.ADMIN)
  @ApiOperation({
    summary: 'Update user by email',
    description: 'Updates a user by email. Admin only.',
  })
  @ApiParam({ name: 'email', description: 'User email address' })
  @ApiBody({ type: UpdateUserDto })
  @ApiResponse({ status: 200, description: 'User updated successfully' })
  @ApiResponse({ status: 403, description: 'Forbidden - requires admin role' })
  @ApiResponse({ status: 404, description: 'User not found' })
  async updateUserByEmail(
    @Param('email') email: string,
    @Body() body: UpdateUserDto,
  ) {
    return this.usersService.updateUserByEmail(email, body);
  }
}
