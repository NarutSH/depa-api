// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  company
  freelance
  guest
}

enum PortfolioImageType {
  cover
  gallery
  main
}

enum FavoriteAction {
  favorite
  unfavorite
}

enum StandardsType {
  ERSB
  PEGI
  CERO
  USK
  ACB
  IARC
  GRAC
  VSC
  OFLC
  BBFC
  FPB
  RARS
  GSRB
  GSRR

  MPA
  EIRIN
  NBTC

  ESRB
}

model User {
  id String @id @default(uuid()) @db.Uuid

  fullnameTh String
  fullnameEn String?

  about       String?
  phoneNumber String?
  email       String? @unique
  website     String?
  address     String?
  image       String?

  industries  String[]
  tags        Json[]   @default([])
  channels    Json[]   @default([])
  specialists Json[]   @default([])

  userType UserType? @default(guest)

  createdAt DateTime   @default(now()) @db.Timestamptz()
  updatedAt DateTime   @updatedAt @db.Timestamptz()
  freelance Freelance?
  company   Company?
  Favorite  Favorite[]
}

model CompanyRevenue {
  id        String  @id @default(uuid()) @db.Uuid
  year      Int
  total     Float
  companyId String  @db.Uuid
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([companyId, year])
}

model FreelanceRevenue {
  id          String @id @default(uuid()) @db.Uuid
  year        Int
  total       Float
  freelanceId String @db.Uuid

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  Freelance Freelance @relation(fields: [freelanceId], references: [id])

  @@unique([freelanceId, year])
}

model RevenueStream {
  id   String @id @default(uuid()) @db.Uuid
  year Int

  industryTypeSlug String
  industry         Industry @relation(fields: [industryTypeSlug], references: [slug])

  categorySlug String
  category     Category @relation(fields: [categorySlug, industryTypeSlug], references: [slug, industrySlug])

  sourceSlug String
  source     Source @relation(fields: [sourceSlug, industryTypeSlug], references: [slug, industrySlug])

  channelSlug String
  channel     Channel @relation(fields: [channelSlug, industryTypeSlug], references: [slug, industrySlug])

  segmentSlug String
  segment     Segment @relation(fields: [segmentSlug, industryTypeSlug], references: [slug, industrySlug])

  percent           Float
  ctrPercent        Float
  value             Float?
  // companyId  String @db.Uuid
  companyJuristicId String
  company           Company @relation(fields: [companyJuristicId], references: [juristicId], onDelete: Restrict)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([companyJuristicId, year, industryTypeSlug, categorySlug, sourceSlug, channelSlug, segmentSlug])
}

model Company {
  id         String  @id @default(uuid()) @db.Uuid
  juristicId String  @unique
  nameTh     String
  nameEn     String?

  description String?

  address     String?
  subDistrict String?
  district    String?
  province    String?
  postalCode  String?

  registerdCapital Float?
  employeeCount    Int?

  phoneNumber String?
  email       String?
  website     String?
  logo        String?
  userId      String  @unique @db.Uuid
  user        User    @relation(fields: [userId], references: [id])

  createdAt  DateTime @default(now()) @db.Timestamptz()
  updatedAt  DateTime @default(now()) @updatedAt @db.Timestamptz()
  industries String[]

  companyRevenue CompanyRevenue[]

  RevenueStream RevenueStream[]
  Portfolio     Portfolio[]
}

model Freelance {
  id          String  @id @default(uuid()) @db.Uuid
  firstNameTh String
  lastNameTh  String
  firstNameEn String?
  lastNameEn  String?

  address     String?
  subDistrict String?
  district    String?
  province    String?
  postalCode  String?

  phoneNumber String?
  email       String? @unique
  juristicId  String? @unique

  industryTypes    String[] // ['game', 'animation']
  skills           Skill[] // [{ name: 'game-design', category: 'game' }]
  freelanceRevenue FreelanceRevenue[] // [{ year: 2021, value: 1000000 }]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  userId    String      @unique @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  Portfolio Portfolio[]
}

model Industry {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  slug      String   @unique
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  Skill    Skill[]
  Source   Source[]
  Channel  Channel[]
  Segment  Segment[]
  Category Category[]

  Standards     Standards[]
  RevenueStream RevenueStream[]
}

model Category {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  slug          String
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]

  @@unique([slug, industrySlug])
}

model Source {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  slug          String
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]

  @@unique([slug, industrySlug])
}

model Channel {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  slug          String
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]

  @@unique([slug, industrySlug])
}

model Segment {
  id            String          @id @default(uuid()) @db.Uuid
  name          String
  slug          String          @unique
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]

  @@unique([slug, industrySlug])
}

model Portfolio {
  id               String  @id @default(uuid()) @db.Uuid
  title            String
  description      String?
  cover_image      String?
  link             String?
  industryTypeSlug String

  tags        String[]
  looking_for String[]

  freelanceId String?    @db.Uuid
  freelance   Freelance? @relation(fields: [freelanceId], references: [id])

  companyJuristicId String?
  company           Company? @relation(fields: [companyJuristicId], references: [juristicId])

  createdAt DateTime             @default(now()) @db.Timestamptz()
  updatedAt DateTime             @default(now()) @updatedAt @db.Timestamptz()
  Favorite  Favorite[]
  Image     PortfolioImage[]
  standards PortfolioStandards[]
}

model PortfolioStandards {
  id          String    @id @default(uuid()) @db.Uuid
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  standardsId String    @db.Uuid
  standards   Standards @relation(fields: [standardsId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([portfolioId, standardsId])
}

model PortfolioImage {
  id          String             @id @default(uuid()) @db.Uuid
  url         String
  description String?
  type        PortfolioImageType @default(gallery)
  portfolioId String             @db.Uuid
  portfolio   Portfolio          @relation(fields: [portfolioId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()
}

model Favorite {
  id          String    @id @default(uuid()) @db.Uuid
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])

  userId String         @db.Uuid
  user   User           @relation(fields: [userId], references: [id])
  action FavoriteAction

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([userId, portfolioId])
}

model Standards {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?

  type StandardsType

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  image              String?
  createdAt          DateTime             @default(now()) @db.Timestamptz()
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamptz()
  PortfolioStandards PortfolioStandards[]
}

model Skill {
  id           String   @id @default(uuid()) @db.Uuid
  title        String
  slug         String
  group        String?
  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  createdAt   DateTime   @default(now()) @db.Timestamptz()
  updatedAt   DateTime   @default(now()) @updatedAt @db.Timestamptz()
  Freelance   Freelance? @relation(fields: [freelanceId], references: [id])
  freelanceId String?    @db.Uuid

  @@unique([slug, industrySlug])
}
