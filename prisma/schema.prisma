generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  company
  freelance
  guest
  admin
}

enum PortfolioImageType {
  cover
  gallery
  main
}

enum FavoriteAction {
  favorite
  unfavorite
}

enum StandardsType {
  ERSB
  PEGI
  CERO
  USK
  ACB
  IARC
  GRAC
  VSC
  OFLC
  BBFC
  FPB
  RARS
  GSRB
  GSRR

  MPA
  EIRIN
  NBTC

  ESRB
}

model UserAdmin {
  id        String   @id @default(uuid()) @db.Uuid
  email     String   @unique
  username  String   @unique
  password  String
  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  refreshTokens AdminRefreshToken[]
}

model User {
  id String @id @default(uuid()) @db.Uuid

  fullnameTh String?
  fullnameEn String?

  about       String?
  phoneNumber String?
  email       String  @unique
  website     String?
  address     String?
  image       String?

  industries        String[]
  industriesRelated UserIndustry[]

  // Legacy fields - keep these
  tags        Json[] @default([])
  channels    Json[] @default([])
  specialists Json[] @default([])

  tags_json        Json?
  channels_json    Json?
  specialists_json Json?

  // New relations
  industryTags     UserTags[]
  industryChannels UserChannels[]
  industrySkills   UserSkills[]

  userType UserType? @default(guest)
  role     UserType? @default(guest)

  createdAt     DateTime           @default(now()) @db.Timestamptz()
  updatedAt     DateTime           @updatedAt @db.Timestamptz()
  freelance     Freelance?
  company       Company?
  Favorite      Favorite[]
  comments      PortfolioComment[]
  refreshTokens RefreshToken[]
}

model UserTags {
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  tagSlug String
  tag     Tag    @relation(fields: [tagSlug], references: [slug], onDelete: Cascade)

  createdAt    DateTime    @default(now()) @db.Timestamptz()
  updatedAt    DateTime    @updatedAt @db.Timestamptz()
  ProjectTag   ProjectTag? @relation(fields: [projectTagId], references: [id])
  projectTagId String?     @db.Uuid

  @@id([userId, tagSlug])
}

model UserChannels {
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  channelSlug String
  channel     Channel @relation(fields: [channelSlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  @@id([userId, channelSlug])
}

model UserSkills {
  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  skillSlug String
  skill     Skill  @relation(fields: [skillSlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  @@id([userId, skillSlug])
}

model UserIndustry {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @db.Uuid
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @updatedAt @db.Timestamptz()

  @@unique([userId, industrySlug])
}

model RefreshToken {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique
  userId    String    @db.Uuid
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt DateTime  @db.Timestamptz()
  issuedAt  DateTime  @default(now()) @db.Timestamptz()
  revokedAt DateTime? @db.Timestamptz()

  @@index([userId])
  @@index([token])
}

model AdminRefreshToken {
  id        String    @id @default(uuid()) @db.Uuid
  token     String    @unique
  adminId   String    @db.Uuid
  admin     UserAdmin @relation(fields: [adminId], references: [id], onDelete: Cascade)
  expiresAt DateTime  @db.Timestamptz()
  issuedAt  DateTime  @default(now()) @db.Timestamptz()
  revokedAt DateTime? @db.Timestamptz()

  @@index([adminId])
  @@index([token])
}

model CompanyRevenue {
  id        String  @id @default(uuid()) @db.Uuid
  year      Int
  total     Float
  companyId String  @db.Uuid
  company   Company @relation(fields: [companyId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([companyId, year])
}

model FreelanceRevenue {
  id          String @id @default(uuid()) @db.Uuid
  year        Int
  total       Float
  freelanceId String @db.Uuid

  createdAt DateTime  @default(now()) @db.Timestamptz()
  updatedAt DateTime  @default(now()) @updatedAt @db.Timestamptz()
  Freelance Freelance @relation(fields: [freelanceId], references: [id])

  @@unique([freelanceId, year])
}

model RevenueStream {
  id   String @id @default(uuid()) @db.Uuid
  year Int

  industryTypeSlug String
  industry         Industry @relation(fields: [industryTypeSlug], references: [slug])

  categorySlug String
  category     Category @relation(fields: [categorySlug, industryTypeSlug], references: [slug, industrySlug])

  sourceSlug String
  source     Source @relation(fields: [sourceSlug, industryTypeSlug], references: [slug, industrySlug])

  channelSlug String
  channel     Channel @relation(fields: [channelSlug, industryTypeSlug], references: [slug, industrySlug])

  segmentSlug String
  segment     Segment @relation(fields: [segmentSlug, industryTypeSlug], references: [slug, industrySlug])

  percent    Float
  ctrPercent Float
  value      Float?

  companyId         String  @db.Uuid
  companyJuristicId String
  company           Company @relation(fields: [companyId], references: [id], onDelete: Restrict)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([companyId, year, industryTypeSlug, categorySlug, sourceSlug, channelSlug, segmentSlug])
}

model Company {
  id         String  @id @default(uuid()) @db.Uuid
  juristicId String  @unique
  nameTh     String
  nameEn     String?

  description    String?
  description_en String?

  image       String?
  cover_image String?

  address     String?
  subDistrict String?
  district    String?
  province    String?
  postalCode  String?

  registerdCapital Float?
  employeeCount    Int?

  phoneNumber String?
  email       String?
  website     String?
  logo        String?
  userId      String  @unique @db.Uuid
  user        User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  // Legacy field - keep this
  industries String[]

  // New relation using join table
  industriesRelated CompanyIndustry[]

  companyRevenue CompanyRevenue[]

  RevenueStream RevenueStream[]
  Portfolio     Portfolio[]
}

// New model for the many-to-many relationship
model CompanyIndustry {
  companyId String  @db.Uuid
  company   Company @relation(fields: [companyId], references: [id], onDelete: Cascade)

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@id([companyId, industrySlug])
}

model Freelance {
  id          String  @id @default(uuid()) @db.Uuid
  firstNameTh String
  lastNameTh  String
  firstNameEn String?
  lastNameEn  String?

  image       String?
  cover_image String?

  address     String?
  subDistrict String?
  district    String?
  province    String?
  postalCode  String?

  phoneNumber String?
  email       String? @unique
  juristicId  String? @unique

  // Legacy field - keep this
  industryTypes String[] // ['game', 'animation']

  // New relation using join table
  industriesRelated FreelanceIndustry[]

  skills           Skill[] // [{ name: 'game-design', category: 'game' }]
  freelanceRevenue FreelanceRevenue[] // [{ year: 2021, value: 1000000 }]

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  userId    String      @unique @db.Uuid
  user      User        @relation(fields: [userId], references: [id])
  Portfolio Portfolio[]
}

// New model for the many-to-many relationship
model FreelanceIndustry {
  freelanceId String    @db.Uuid
  freelance   Freelance @relation(fields: [freelanceId], references: [id], onDelete: Cascade)

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@id([freelanceId, industrySlug])
}

model Industry {
  id          String   @id @default(uuid()) @db.Uuid
  name        String
  slug        String   @unique
  color       String?  @default("#789DBC")
  description String?
  image       String?
  createdAt   DateTime @default(now()) @db.Timestamptz()
  updatedAt   DateTime @default(now()) @updatedAt @db.Timestamptz()

  Skill    Skill[]
  Source   Source[]
  Channel  Channel[]
  Segment  Segment[]
  Category Category[]

  companies   CompanyIndustry[]
  freelancers FreelanceIndustry[]
  users       UserIndustry[]

  Standards     Standards[]
  RevenueStream RevenueStream[]

  Tag        Tag[]
  LookingFor LookingFor[]
  ProjectTag ProjectTag[]
}

model Tag {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  UserTags UserTags[]
}

model ProjectTag {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  createdAt    DateTime       @default(now()) @db.Timestamptz()
  updatedAt    DateTime       @default(now()) @updatedAt @db.Timestamptz()
  PortfolioTag PortfolioTag[]
  UserTags     UserTags[]
}

model LookingFor {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  createdAt           DateTime              @default(now()) @db.Timestamptz()
  updatedAt           DateTime              @default(now()) @updatedAt @db.Timestamptz()
  PortfolioLookingFor PortfolioLookingFor[]
}

model Category {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  description String?
  image       String?

  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]
  Portfolio     Portfolio[]

  @@unique([slug, industrySlug])
}

model Source {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  description   String?
  image         String?
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]

  @@unique([slug, industrySlug])
}

model Channel {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  description   String?
  image         String?
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]
  UserChannels  UserChannels[]

  @@unique([slug, industrySlug])
}

model Segment {
  id   String @id @default(uuid()) @db.Uuid
  name String
  slug String @unique

  description   String?
  image         String?
  createdAt     DateTime        @default(now()) @db.Timestamptz()
  updatedAt     DateTime        @default(now()) @updatedAt @db.Timestamptz()
  industrySlug  String
  industry      Industry        @relation(fields: [industrySlug], references: [slug])
  RevenueStream RevenueStream[]

  @@unique([slug, industrySlug])
}

model Portfolio {
  id               String  @id @default(uuid()) @db.Uuid
  title            String
  title_en         String?
  description      String?
  description_en   String?
  cover_image      String?
  link             String?
  industryTypeSlug String

  // Legacy fields - keep these
  tags        String[]
  looking_for String[]

  // New relations
  categorySlug String?
  category     Category? @relation(fields: [categorySlug], references: [slug])

  industryTags       PortfolioTag[]
  industryLookingFor PortfolioLookingFor[]

  freelanceId String?    @db.Uuid
  freelance   Freelance? @relation(fields: [freelanceId], references: [id])

  companyId String?  @db.Uuid
  company   Company? @relation(fields: [companyId], references: [id])

  // legacy
  companyJuristicId String?
  // company           Company? @relation(fields: [companyJuristicId], references: [juristicId])

  createdAt DateTime         @default(now()) @db.Timestamptz()
  updatedAt DateTime         @default(now()) @updatedAt @db.Timestamptz()
  Favorite  Favorite[]
  Image     PortfolioImage[]

  standards PortfolioStandards[]
  comments  PortfolioComment[]
}

// New join table for Portfolio-Tag relationship
model PortfolioTag {
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  // tagSlug String
  // tag     Tag    @relation(fields: [tagSlug], references: [slug], onDelete: Cascade)

  createdAt      DateTime   @default(now()) @db.Timestamptz()
  updatedAt      DateTime   @default(now()) @updatedAt @db.Timestamptz()
  projectTag     ProjectTag @relation(fields: [projectTagSlug], references: [slug])
  projectTagSlug String

  @@id([portfolioId, projectTagSlug])
}

// New join table for Portfolio-LookingFor relationship
model PortfolioLookingFor {
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  lookingForSlug String
  lookingFor     LookingFor @relation(fields: [lookingForSlug], references: [slug], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@id([portfolioId, lookingForSlug])
}

model PortfolioStandards {
  id          String    @id @default(uuid()) @db.Uuid
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  standardsId String    @db.Uuid
  standards   Standards @relation(fields: [standardsId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([portfolioId, standardsId])
}

model PortfolioImage {
  id          String             @id @default(uuid()) @db.Uuid
  url         String
  description String?
  type        PortfolioImageType @default(gallery)
  portfolioId String             @db.Uuid
  portfolio   Portfolio          @relation(fields: [portfolioId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()
}

model Favorite {
  id          String    @id @default(uuid()) @db.Uuid
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id])

  userId String         @db.Uuid
  user   User           @relation(fields: [userId], references: [id])
  action FavoriteAction

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()

  @@unique([userId, portfolioId])
}

model Standards {
  id          String  @id @default(uuid()) @db.Uuid
  name        String
  description String?

  type StandardsType

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  image              String?
  createdAt          DateTime             @default(now()) @db.Timestamptz()
  updatedAt          DateTime             @default(now()) @updatedAt @db.Timestamptz()
  PortfolioStandards PortfolioStandards[]
}

model Skill {
  id    String  @id @default(uuid()) @db.Uuid
  title String
  slug  String  @unique
  group String?

  industrySlug String
  industry     Industry @relation(fields: [industrySlug], references: [slug])

  createdAt   DateTime     @default(now()) @db.Timestamptz()
  updatedAt   DateTime     @default(now()) @updatedAt @db.Timestamptz()
  Freelance   Freelance?   @relation(fields: [freelanceId], references: [id])
  freelanceId String?      @db.Uuid
  UserSkills  UserSkills[]

  @@unique([slug, industrySlug])
}

model PortfolioComment {
  id          String    @id @default(uuid()) @db.Uuid
  content     String
  portfolioId String    @db.Uuid
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  userId      String    @db.Uuid
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // For replies (1-level depth only)
  parentId String?            @db.Uuid
  parent   PortfolioComment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies  PortfolioComment[] @relation("CommentReplies")

  createdAt DateTime @default(now()) @db.Timestamptz()
  updatedAt DateTime @default(now()) @updatedAt @db.Timestamptz()
}
